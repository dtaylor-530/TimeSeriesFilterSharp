<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeneticSharp.Infrastructure.Framework</name>
    </assembly>
    <members>
        <member name="T:GeneticSharp.Infrastructure.Framework.Reflection.TypeHelper">
            <summary>
            Type helper.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Reflection.TypeHelper.GetTypesByInterface``1">
            <summary>
            Gets types by interface name
            </summary>
            <typeparam name="TInterface">The interface.</typeparam>
            <returns>All types that implements the interface specified.</returns>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Reflection.TypeHelper.GetDisplayNamesByInterface``1">
            <summary>
            Gets the available crossover names.
            </summary>
            <typeparam name="TInterface">The interface.</typeparam>
            <returns>The crossover names.</returns>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Reflection.TypeHelper.CreateInstanceByName``1(System.String,System.Object[])">
            <summary>
            Creates the TInterface's implementation with the specified name.
            </summary>
            <returns>The TInterface's implementation instance.</returns>
            <param name="name">The TInterface's implementation name.</param>
            <param name="constructorArgs">Constructor arguments.</param>
            <typeparam name="TInterface">The interface.</typeparam>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Reflection.TypeHelper.GetTypeByName``1(System.String)">
            <summary>
            Gets the TInterface's implementation with the specified name.
            </summary>
            <returns>The TInterface's implementation type.</returns>
            <param name="name">The TInterface's implementation name.</param>
            <typeparam name="TInterface">The interface.</typeparam>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor">
            <summary>
            Defines a interface to a task executor.
            </summary>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.Timeout">
            <summary>
            Gets or sets the timeout to execute the tasks.
            </summary>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.Add(System.Action)">
            <summary>
            Add the specified task to be executed.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.Clear">
            <summary>
            Clear all the tasks.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.Start">
            <summary>
            Starts the tasks execution.
            </summary>
            <returns>If has reach the timeout false, otherwise true.</returns>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.ITaskExecutor.Stop">
            <summary>
            Stops the tasks execution.
            </summary>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Threading.LinearTaskExecutor">
            <summary>
            An ITaskExecutor's implementation that executes the tasks in a linear fashion.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.LinearTaskExecutor.Start">
            <summary>
            Starts the tasks execution.
            </summary>
            <returns>If has reach the timeout false, otherwise true.</returns>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase">
            <summary>
            Task executor base.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase"/> class.
            </summary>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Timeout">
            <summary>
            Gets or sets the timeout to execute the tasks.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
            <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Tasks">
            <summary>
            Gets the tasks.
            </summary>
        </member>
        <member name="P:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.StopRequested">
            <summary>
            Gets a value indicating whether this
            <see cref="T:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase"/> stop requested.
            </summary>
            <value><c>true</c> if stop requested; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Add(System.Action)">
            <summary>
            Add the specified task to be executed.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Clear">
            <summary>
            Clear all the tasks.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Start">
            <summary>
            Starts the tasks execution.
            </summary>
            <returns>If has reach the timeout false, otherwise true.</returns>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Threading.TaskExecutorBase.Stop">
            <summary>
            Stops the tasks execution.
            </summary>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation">
            <summary>
            Binary string representation.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToRepresentation(System.Int64,System.Int32)">
            <summary>
            Converts the long value to the binary string representation.
            </summary>
            <returns>The representation.</returns>
            <param name="value">Value.</param>
            <param name="totalBits">Total bits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToRepresentation(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Converts the long value to the binary string representation.
            </summary>
            <returns>The representation.</returns>
            <param name="value">Value.</param>
            <param name="totalBits">Total bits.</param>
            <param name="throwsException">If should throws an exception when the total bits is lower than needed by the value.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToRepresentation(System.Int64[],System.Int32[])">
            <summary>
            Converts the long values to the binary string representations.
            </summary>
            <returns>The representation.</returns>
            <param name="values">Values.</param>
            <param name="totalBits">Total bits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToInt64(System.String)">
            <summary>
            Converts from string representation to Int64.
            </summary>
            <returns>The int64.</returns>
            <param name="representation">Representation.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToInt64(System.String,System.Int32[])">
            <summary>
            Converts from string representation to Int64[].
            </summary>
            <returns>The int64.</returns>
            <param name="representation">Representation.</param>
            <param name="totalBits">Total bits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToRepresentation(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts from double to string representation .
            </summary>
            <returns>The representation.</returns>
            <param name="value">Value.</param>
            <param name="totalBits">Total bits.</param>
            <param name="fractionDigits">Fraction (scale) digits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToRepresentation(System.Double[],System.Int32[],System.Int32[])">
            <summary>
            Converts from doubles to strings representation .
            </summary>
            <returns>The representations.</returns>
            <param name="values">The values..</param>
            <param name="totalBits">The total bits.</param>
            <param name="fractionDigits">The fraction (scale) digits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToDouble(System.String,System.Int32)">
            <summary>
            Converts from string representation to double.
            </summary>
            <returns>The double.</returns>
            <param name="representation">Representation.</param>
            <param name="fractionDigits">Fraction (scale) digits.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.BinaryStringRepresentation.ToDouble(System.String,System.Int32[],System.Int32[])">
            <summary>
            Converts from string representation to doubles.
            </summary>
            <returns>The double.</returns>
            <param name="representation">Representation.</param>
            <param name="totalBits">Total bits.</param>
            <param name="fractionDigits">Fraction (scale) digits.</param>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Commons.ExceptionHelper">
            <summary>
            Exception helper.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.ExceptionHelper.ThrowIfNull(System.String,System.Object)">
            <summary>
            Throws an ArgumentNullException if argument is null.
            </summary>
            <param name="argumentName">The argument name.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Commons.ExceptionHelper.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if argument is null or an ArgumentException if string is empty.
            </summary>
            <param name="argumentName">The argument name.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Texts.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Texts.StringExtensions.With(System.String,System.Object[])">
            <summary>
            Replaces the format items in the string with the string representation of
            corresponding objects in the specified array.
            </summary>
            <remarks>
            An invariant culture is used to format.
            </remarks>
            <returns>The formatted string..</returns>
            <param name="value">The string.</param>
            <param name="args">The arguments..</param>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Texts.StringExtensions.RemovePunctuations(System.String)">
            <summary>
            Removes the punctuations.
            </summary>
            <returns>The clean string.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="T:GeneticSharp.Infrastructure.Framework.Collections.EnumerableExtensions">
            <summary>
            Enumerable extensions.
            </summary>
        </member>
        <member name="M:GeneticSharp.Infrastructure.Framework.Collections.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates in the collection calling the action for each item.
            </summary>
            <param name="self">The enumerable it self.</param>
            <param name="action">The each action.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
    </members>
</doc>
