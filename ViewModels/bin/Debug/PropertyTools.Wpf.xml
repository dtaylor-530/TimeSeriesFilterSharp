<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyTools.Wpf</name>
    </assembly>
    <members>
        <member name="T:PropertyTools.Wpf.ScreenGrab">
            <summary>
            Provides a behavior that let you capture the contents of a control to a bitmap and copy it to the clipboard.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ScreenGrab" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ScreenGrab.CommandProperty">
            <summary>
            Gets the command property.
            </summary>
            <value>The command property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ScreenGrab.GestureProperty">
            <summary>
            Gets the gesture property.
            </summary>
            <value>The gesture property.</value>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.GetCommand(System.Windows.UIElement)">
            <summary>
            Gets the command property.
            </summary>
            <param name="element">The element.</param>
            <returns>
            A KeyCommand.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.GetGesture(System.Windows.UIElement)">
            <summary>
            Gets the gesture property.
            </summary>
            <param name="element">The element.</param>
            <returns>
            A KeyGesture.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.SetCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <summary>
            Sets the command property.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.SetGesture(System.Windows.UIElement,System.Windows.Input.KeyGesture)">
            <summary>
            Sets the gesture property.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.Grab(System.Windows.Media.Visual,System.Double)">
            <summary>
            Grabs the specified element and copies to clipboard.
            </summary>
            <param name="element">The element.</param>
            <param name="resolution">The resolution (dots per inch).</param>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the command has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ScreenGrab.OnGestureCommandBindingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when gesture has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.DelegateCommandBinding">
            <summary>
            Provides a CommandBinding based on delegates.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommandBinding.execute">
            <summary>
            The execute action.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommandBinding.canExecute">
            <summary>
            The can execute function.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding.#ctor(System.Windows.Input.ICommand,System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommandBinding" /> class.
            </summary>
            <param name="command">The command.</param>
            <param name="execute">The execute action.</param>
            <param name="canExecute">The can execute function.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding.ExecuteDelegate(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the delegate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding.CanExecuteDelegate(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether this command can execute.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.DelegateCommandBinding`1">
            <summary>
            Provides a command binding that passes to command parameter to delegates.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommandBinding`1.execute">
            <summary>
            The execute action.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommandBinding`1.canExecute">
            <summary>
            The can execute function.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding`1.#ctor(System.Windows.Input.ICommand,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommandBinding`1" /> class.
            </summary>
            <param name="command">The command.</param>
            <param name="execute">The execute action.</param>
            <param name="canExecute">The can execute function.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding`1.ExecuteDelegate(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the delegate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommandBinding`1.CanExecuteDelegate(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether this command can execute.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.EnumerableComparer`1">
            <summary>
            Compares two sequences.
            </summary>
            <typeparam name="T">Type of item in the sequences.</typeparam>
            <remarks>
            Compares elements from the two input sequences in turn. If we
            run out of list before finding unequal elements, then the shorter
            list is deemed to be the lesser list.
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.EnumerableComparer`1.elementComparer">
            <summary>
            Object used for comparing each element.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumerableComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.EnumerableComparer`1"/> class using the default comparer for {T}.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumerableComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.EnumerableComparer`1"/> class using the specified comparer for {T}.
            </summary>
            <param name="elementComparer">Comparer for comparing each pair of items from the sequences.</param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumerableComparer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">First sequence.</param>
            <param name="y">Second sequence.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ISortDescriptionComparer">
            <summary>
            Defines a comparer that uses a collection of sort descriptions.
            </summary>
            <seealso cref="T:System.Collections.IComparer" />
        </member>
        <member name="P:PropertyTools.Wpf.ISortDescriptionComparer.SortDescriptions">
            <summary>
            Gets the sort descriptions.
            </summary>
            <value>
            The sort descriptions.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.NaturalSortDescriptionComparer">
            <summary>
            Implements an item comparer that uses reflection and a list of sort descriptions.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.NaturalSortDescriptionComparer.enumerableComparer">
            <summary>
            The enumerable comparer.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NaturalSortDescriptionComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NaturalSortDescriptionComparer" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.NaturalSortDescriptionComparer.SortDescriptions">
            <summary>
            Gets the sort descriptions.
            </summary>
            <value>
            The sort descriptions.
            </value>
        </member>
        <member name="M:PropertyTools.Wpf.NaturalSortDescriptionComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than <paramref name="y" />. Zero <paramref name="x" /> equals <paramref name="y" />. Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.Bitmap">
            <summary>
            Represents an image that avoids blurring over pixel boundaries.
            </summary>
            <remarks>The Bitmap element is using the ActualWidth/Height of the image for the control size.
            It also offsets the image to avoid blurring over pixel boundaries.
            http://blogs.msdn.com/b/dwayneneed/archive/2007/10/05/blurry-bitmaps.aspx</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.SourceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.Bitmap.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.sourceDownloaded">
            <summary>
            The source downloaded.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.sourceFailed">
            <summary>
            The source failed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.pixelOffset">
            <summary>
            The pixel offset.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Bitmap" /> class.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.Bitmap.BitmapFailed">
            <summary>
            The bitmap failed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Bitmap.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when rendering.
            </summary>
            <param name="dc">The dc.</param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the source changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.ApplyVisualTransform(System.Windows.Point,System.Windows.Media.Visual,System.Boolean)">
            <summary>
            Applies the visual transform.
            </summary>
            <param name="point">The point.</param>
            <param name="v">The v.</param>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if two points are close.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>
            True if close.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.AreClose(System.Double,System.Double)">
            <summary>
            Determines of two values are close.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            True if close.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.GetPixelOffset">
            <summary>
            Gets the pixel offset.
            </summary>
            <returns>
            The pixel offset.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.GetVisualTransform(System.Windows.Media.Visual)">
            <summary>
            Gets the visual transform.
            </summary>
            <param name="v">The v.</param>
            <returns>
            The <see cref="T:System.Windows.Media.Matrix" />.
            </returns>
            <remarks>Gets the matrix that will convert a point from "above" the
            coordinate space of a visual into the the coordinate space
            "below" the visual.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when layout is updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceDownloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the source has downloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceFailed(System.Object,System.Windows.Media.ExceptionEventArgs)">
            <summary>
            Called when source failed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Media.ExceptionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.TryApplyVisualTransform(System.Windows.Point,System.Windows.Media.Visual,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Tries to apply the visual transform.
            </summary>
            <param name="point">The point.</param>
            <param name="v">The v.</param>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <returns>
            The <see cref="T:System.Windows.Point" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPicker">
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPicker.SelectedColor"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.PartColorPickerPanel">
            <summary>
            The color picker panel part constant.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.colorPickerPanel">
            <summary>
            The color picker panel.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorPicker" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnApplyTemplate">
            <summary>
            Called when <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> is called.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CoerceSelectedColorValue(System.Object)">
            <summary>
            Coerces the value of the <see cref="P:PropertyTools.Wpf.ColorPicker.SelectedColor" /> property.
            </summary>
            <param name="basevalue">The base value.</param>
            <returns>
            The coerced <see cref="P:PropertyTools.Wpf.ColorPicker.SelectedColor" /> value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnDropDownOpened(System.EventArgs)">
            <summary>
            Reports when a combo box's popup opens.
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened" /> event.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnSelectedColorChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in selected color.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CoerceSelectedColorValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="d">The sender.</param>
            <param name="basevalue">The base value.</param>
            <returns>
            The coerced value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.SelectedColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in selected color.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnPredefinedColorPanelSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:PredefinedColorPanelSelectionChangedEvent" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPickerPanel">
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.AlphaProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Alpha"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.BlueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Blue"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.BrightnessProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Brightness"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.GreenProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Green"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.HueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Hue"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.IsPickingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.IsPicking"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.RedProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Red"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.SaturationProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.Saturation"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorPickerPanel.SelectedColor"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.PartHsv">
            <summary>
            The HSV control part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.PartPredefinedColorPanel">
            <summary>
            The predefined color panel part name
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.maxNumberOfRecentColors">
            <summary>
            The max number of recent colors.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.showHsvPanel">
            <summary>
            The show hsv panel.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.hsvControl">
            <summary>
            The HSV control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.pickingTimer">
            <summary>
            The picking timer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.withinColorChange">
            <summary>
            The within color change.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.withinComponentChange">
            <summary>
            The within component change.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorPickerPanel" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColorPickerPanel" /> class.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.ColorPickerPanel.PropertyChanged">
            <summary>
            The property changed.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.ColorPickerPanel.PredefinedColorPanelSelectionChangedEvent">
            <summary>
            The predefined colors selection changed event
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.RecentColors">
            <summary>
            Gets the recent colors.
            </summary>
            <value>The recent colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.StandardColors">
            <summary>
            Gets the standard colors.
            </summary>
            <value>The standard colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Strings">
            <summary>
            Gets or sets the localized strings.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.ThemeColors">
            <summary>
            Gets the theme colors.
            </summary>
            <value>The theme colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.OpacityVariations">
            <summary>
            Gets the opacity colors.
            </summary>
            <value>The opacity colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Alpha">
            <summary>
            Gets or sets the alpha value.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Blue">
            <summary>
            Gets or sets the blue.
            </summary>
            <value>The blue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Brightness">
            <summary>
            Gets or sets the brightness.
            </summary>
            <value>The brightness.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Green">
            <summary>
            Gets or sets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Hue">
            <summary>
            Gets or sets the hue.
            </summary>
            <value>The hue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.IsPicking">
            <summary>
            Gets or sets a value indicating whether this user is picking colors on the screen.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.MaxNumberOfRecentColors">
            <summary>
            Gets or sets the max number of recent colors.
            </summary>
            <value>The max number of recent colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Red">
            <summary>
            Gets or sets the red value.
            </summary>
            <value>The red.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Saturation">
            <summary>
            Gets or sets the saturation.
            </summary>
            <value>The saturation.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.ShowHsvPanel">
            <summary>
            Gets or sets a value indicating whether to show the HSV panel.
            </summary>
            <remarks>The backing field is static.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.IsPickingColor">
            <summary>
            Determines whether the user is color picking.
            </summary>
            <returns>
            <c>true</c> if the user is picking a color; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.CoerceSelectedColorValue(System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="baseValue">The base value.</param>
            <returns>
            The coerced selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnComponentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a color component is changed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnIsPickingChanged">
            <summary>
            Called when the IsPicking property is changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnSelectedColorChanged(System.Nullable{System.Windows.Media.Color},System.Nullable{System.Windows.Media.Color})">
            <summary>
            Called when the selected color changed.
            </summary>
            <param name="newColor">The new color.</param>
            <param name="oldColor">The old color.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.RaisePropertyChanged(System.String)">
            <summary>
            The raise property changed.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.CoerceSelectedColorValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="d">The d.</param>
            <param name="basevalue">The base value.</param>
            <returns>
            The coerce selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.ComponentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a color component is changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.InitPalette">
            <summary>
            Initializes the palettes.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.IsPickingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is picking changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.SelectedColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected color changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.AddColorToRecentColorsIfMissing(System.Windows.Media.Color)">
            <summary>
            The add color to recent colors if missing.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnPredefinedColorPanelSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:PredefinedColorPanelSelectionChangedEvent" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.PanelUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the panel is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.Pick(System.Object,System.EventArgs)">
            <summary>
            Picks a color from the current mouse position.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.IsPickKeyDown">
            <summary>
            Determines whether the color picking key is pressed.
            </summary>
            <returns>
            <c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.UpdateOpacityVariations(System.Windows.Media.Color)">
            <summary>
            Updates the opacity variation collection.
            </summary>
            <param name="color">The currently selected color.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.UpdateHSV(System.Windows.Media.Color)">
            <summary>
            Updates the hue, saturation and brightness properties.
            </summary>
            <param name="color">The currently selected color.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.UpdateRGB(System.Windows.Media.Color)">
            <summary>
            Updates the red, green, blue and alpha properties.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPickerPanelStrings">
            <summary>
            Provides localized strings for the color picker panel.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanelStrings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColorPickerPanelStrings" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.ColorPickerToolTip">
            <summary>
            Gets or sets the tool tip for the 'color picker' button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.TogglePanelToolTip">
            <summary>
            Gets or sets the tool tip for the 'toggle panel' button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.HSV">
            <summary>
            Gets or sets the 'HSV' string.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.RecentColors">
            <summary>
            Gets or sets 'RecentColors' string.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.OpacityVariations">
            <summary>
            Gets or sets the 'Opacity variations' string.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.StandardColors">
            <summary>
            Gets or sets the 'Standard colors' string.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.ThemeColors">
            <summary>
            Gets or sets the 'Theme colors' string.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.Values">
            <summary>
            Gets or sets the 'Values' string.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorSlider">
            <summary>
            Represents a color slider.
            </summary>
            <remarks>Original code by Ury Jamshy, 21 July 2011.
            See http://www.codeproject.com/KB/WPF/ColorPicker010.aspx
            The Code Project Open License (CPOL)
            http://www.codeproject.com/info/cpol10.aspx</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.ColorSlider.LeftColorProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorSlider.LeftColor"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorSlider.RightColorProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.ColorSlider.RightColor"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorSlider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorSlider" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorSlider.LeftColor">
            <summary>
            Gets or sets the left color.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorSlider.RightColor">
            <summary>
            Gets or sets the right color.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.HsvControl">
            <summary>
            The hsv control.
            </summary>
            <remarks>Original code by Ury Jamshy, 21 July 2011.
            See http://www.codeproject.com/KB/WPF/ColorPicker010.aspx
            The Code Project Open License (CPOL)
            http://www.codeproject.com/info/cpol10.aspx</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.HueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HsvControl.Hue"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.SaturationProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HsvControl.Saturation"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HsvControl.SelectedColor"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.ValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HsvControl.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.PartThumb">
            <summary>
            The thumb name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.thumbTransform">
            <summary>
            The thumb transform.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.thumb">
            <summary>
            The thumb.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.withinUpdate">
            <summary>
            The within update flag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.HsvControl" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The on thumb drag completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragCompleted(System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The on thumb drag completed.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Hue">
            <summary>
            Gets or sets Hue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Saturation">
            <summary>
            Gets or sets Saturation.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.SelectedColor">
            <summary>
            Gets or sets SelectedColor.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnApplyTemplate">
            <summary>
            The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />�routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            The on render size changed.
            </summary>
            <param name="sizeInfo">The size info.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnHueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on hue changed.
            </summary>
            <param name="relatedObject">The related object.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnSaturationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on saturation changed.
            </summary>
            <param name="relatedObject">The related object.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The on thumb drag delta.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on value changed.
            </summary>
            <param name="relatedObject">The related object.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.LimitValue(System.Double,System.Double)">
            <summary>
            Limit value to range (0 , max]
            </summary>
            <param name="value">The value.</param>
            <param name="max">The max.</param>
            <returns>
            The limit value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The on thumb drag delta.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdatePositionAndSaturationAndValue(System.Double,System.Double)">
            <summary>
            The update position and saturation and value.
            </summary>
            <param name="positionX">The position x.</param>
            <param name="positionY">The position y.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdateSelectedColor">
            <summary>
            The update selected color.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdateThumbPosition">
            <summary>
            The update thumb position.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.SpectrumSlider">
            <summary>
            The spectrum slider.
            </summary>
            <remarks>Original code by Ury Jamshy, 21 July 2011.
            See http://www.codeproject.com/KB/WPF/ColorPicker010.aspx
            The Code Project Open License (CPOL)
            http://www.codeproject.com/info/cpol10.aspx</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.SpectrumSlider.HueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpectrumSlider.Hue"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpectrumSlider.withinChanging">
            <summary>
            The within changing flag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.SpectrumSlider" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.SpectrumSlider" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SpectrumSlider.Hue">
            <summary>
            Gets or sets Hue.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.OnValueChanged(System.Double,System.Double)">
            <summary>
            The on value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.OnHuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on hue property changed.
            </summary>
            <param name="relatedObject">The related object.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.SetBackground">
            <summary>
            The set background.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CheckMark">
            <summary>
            Represents a control that shows a check mark (not editable CheckBox without the box).
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CheckMark.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.CheckMark.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CheckMark.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.CheckMark" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CheckMark.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value><c>true</c> if this instance is checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PropertyTools.Wpf.DockPanelSplitter">
            <summary>
            Represents a control that lets the user change the size of elements in a <see cref="T:System.Windows.Controls.DockPanel" />.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.ProportionalResizeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DockPanelSplitter.ProportionalResize"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.ThicknessProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DockPanelSplitter.Thickness"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.element">
            <summary>
            The element.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.previousParentHeight">
            <summary>
            The previous parent height.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.previousParentWidth">
            <summary>
            The previous parent width.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.startDragPoint">
            <summary>
            The start drag point.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.DockPanelSplitter" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DockPanelSplitter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.IsHorizontal">
            <summary>
            Gets a value indicating whether this splitter is horizontal.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.ProportionalResize">
            <summary>
            Gets or sets a value indicating whether to resize elements proportionally.
            </summary>
            <remarks>Set to <c>false</c> if you don't want the element to be resized when the parent is resized.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.Thickness">
            <summary>
            Gets or sets the thickness (height or width, depending on orientation).
            </summary>
            <value>The thickness.</value>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The dock changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.ThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The thickness changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.AdjustHeight(System.Double,System.Windows.Controls.Dock)">
            <summary>
            Adjusts the height.
            </summary>
            <param name="dy">The dy.</param>
            <param name="dock">The dock.</param>
            <returns>
            The adjust height.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.AdjustWidth(System.Double,System.Windows.Controls.Dock)">
            <summary>
            Adjusts the width.
            </summary>
            <param name="dx">The dx.</param>
            <param name="dock">The dock.</param>
            <returns>
            The adjust width.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockPanelSplitterLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockPanelSplitterUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.ParentSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the parent element size is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.SetTargetHeight(System.Double)">
            <summary>
            Sets the height of the target.
            </summary>
            <param name="newHeight">The new height.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.SetTargetWidth(System.Double)">
            <summary>
            Sets the width of the target.
            </summary>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.UpdateHeightOrWidth">
            <summary>
            Updates the width or height .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.UpdateTargetElement">
            <summary>
            Updates the target element (the element the DockPanelSplitter works on).
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.EnumMenuItem">
            <summary>
            Represents a menu item with a SelectedValue property that can bind to Enum values.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EnumMenuItem.SelectedValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.EnumMenuItem.SelectedValue"/> dependency property.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EnumMenuItem.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.SelectedValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected value changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.ItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a menu item is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.OnSelectedValueChanged">
            <summary>
            Called when selected value changed.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DirectoryPicker">
            <summary>
            Represents a control that allows the user to pick a directory.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.DirectoryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.Directory"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.FolderBrowserDialogServiceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.FolderBrowserDialogService"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.BrowseButtonContentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.BrowseButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.ExploreButtonContentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.ExploreButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.BrowseButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.BrowseButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.ExploreButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DirectoryPicker.ExploreButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.DirectoryPicker" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DirectoryPicker" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.BrowseCommand">
            <summary>
            Gets or sets the browse command.
            </summary>
            <value>The browse command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.ExploreCommand">
            <summary>
            Gets or sets the explore command.
            </summary>
            <value>The explore command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.Directory">
            <summary>
            Gets or sets the directory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.FolderBrowserDialogService">
            <summary>
            Gets or sets FolderBrowserDialogService.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.BrowseButtonContent">
            <summary>
            Gets or sets the content on the "browse" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.ExploreButtonContent">
            <summary>
            Gets or sets the content on the "explore" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.BrowseButtonToolTip">
            <summary>
            Gets or sets the ToolTip on the "browse" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.ExploreButtonToolTip">
            <summary>
            Gets or sets the ToolTip on the "explore" button.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.Browse">
            <summary>
            Open the browse dialog.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.Explore">
            <summary>
            Opens Windows Explorer with the current directory.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FilePicker">
            <summary>
            Represents a control that allows the user to pick a file.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.BasePathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.BasePath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.DefaultExtensionProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.DefaultExtension"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.MultiselectProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.Multiselect"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FileDialogServiceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.FileDialogService"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FilePathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.FilePath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FilePathsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.FilePaths"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FilterProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.Filter"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.UseOpenDialogProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.UseOpenDialog"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.BrowseButtonContentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.BrowseButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.ExploreButtonContentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.ExploreButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.OpenButtonContentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.OpenButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.BrowseButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.BrowseButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.ExploreButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.ExploreButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.OpenButtonToolTipProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FilePicker.OpenButtonToolTip"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.FilePicker" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.FilePicker" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BrowseCommand">
            <summary>
            Gets or sets the browse command.
            </summary>
            <value>The browse command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.ExploreCommand">
            <summary>
            Gets or sets the explore command.
            </summary>
            <value>The explore command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.OpenCommand">
            <summary>
            Gets or sets the open command.
            </summary>
            <value>The open command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.DefaultExtension">
            <summary>
            Gets or sets the default extension.
            </summary>
            <value>The default extension.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.Multiselect">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:PropertyTools.Wpf.FilePicker" /> allows users to select multiple files.
            </summary>
            <value><c>true</c> if multiple selections are allowed; otherwise, false. The default is <c>false</c>.</value>
            <remarks>When this feature is enabled, use the <see cref="P:PropertyTools.Wpf.FilePicker.FilePaths" /> property to get/set the filenames.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.IsInputEnabled">
            <summary>
            Gets a value indicating whether input is enabled.
            </summary>
            <remarks>If the <see cref="T:PropertyTools.Wpf.FilePicker" /> is in multi-select mode, disable free form text input.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.FileDialogService">
            <summary>
            Gets or sets the file dialog service.
            </summary>
            <value>The file dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BasePath">
            <summary>
            Gets or sets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.FilePaths">
            <summary>
            Gets or sets the file paths.
            </summary>
            <value>The file paths.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.UseOpenDialog">
            <summary>
            Gets or sets a value indicating whether to use the File Open Dialog.
            </summary>
            <value>The "File Open" dialog is used if the property is set to <c>true</c>; otherwise, the File Save dialog is used.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BrowseButtonContent">
            <summary>
            Gets or sets the content on the "browse" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.ExploreButtonContent">
            <summary>
            Gets or sets the content on the "explore" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.OpenButtonContent">
            <summary>
            Gets or sets the content on the "open" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BrowseButtonToolTip">
            <summary>
            Gets or sets the ToolTip on the "browse" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.ExploreButtonToolTip">
            <summary>
            Gets or sets the ToolTip on the "explore" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.OpenButtonToolTip">
            <summary>
            Gets or sets the ToolTip on the "open" button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.SelectedFilePaths">
            <summary>
            Gets the selected file paths.
            </summary>
            <value>
            A sequence of file paths.
            </value>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.OnFilePathsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensures synchronization between <see cref="P:PropertyTools.Wpf.FilePicker.FilePaths" /> and <see cref="P:PropertyTools.Wpf.FilePicker.FilePath" /> properties when <see cref="P:PropertyTools.Wpf.FilePicker.Multiselect" /> is enabled
            </summary>
            <param name="dependencyObject">The <see cref="T:PropertyTools.Wpf.FilePicker" />.</param>
            <param name="ea">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.Browse">
            <summary>
            Shows the open or save file dialog.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.Explore">
            <summary>
            Starts Windows Explorer with the current file.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.Open">
            <summary>
            Opens the current file.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.CanOpen">
            <summary>
            Determines whether the file can be opened.
            </summary>
            <returns>
            <c>true</c> if the file exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.CanExplore">
            <summary>
            Determines whether the file can be explored.
            </summary>
            <returns>
            <c>true</c> if the file exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetAbsolutePath(System.String)">
            <summary>
            Gets the absolute path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            The get absolute path.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetAbsolutePaths(System.String[])">
            <summary>
            Gets the absolute paths.
            </summary>
            <param name="filePaths">The file paths.</param>
            <returns>
            The get absolute paths.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetRelativePath(System.String)">
            <summary>
            Gets the relative path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            The get relative path.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetRelativePaths(System.String[])">
            <summary>
            Gets the relative paths.
            </summary>
            <param name="filePaths">The file paths.</param>
            <returns>
            The get relative paths.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IFileDialogService">
            <summary>
            The file dialog interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IFileDialogService.ShowOpenFileDialog(System.String@,System.String,System.String)">
            <summary>
            Shows the open file dialog.
            </summary>
            <param name="filename">The filename.</param>
            <param name="filter">The filter.</param>
            <param name="defaultExtension">The default extension.</param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IFileDialogService.ShowOpenFilesDialog(System.String[]@,System.String,System.String)">
            <summary>
            Shows the open files dialog.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="filter">The filter.</param>
            <param name="defaultExtension">The default extension.</param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IFileDialogService.ShowSaveFileDialog(System.String@,System.String,System.String)">
            <summary>
            Shows the save file dialog.
            </summary>
            <param name="filename">The filename.</param>
            <param name="filter">The filter.</param>
            <param name="defaultExtension">The default extension.</param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IFolderBrowserDialogService">
            <summary>
            The browser dialog interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IFolderBrowserDialogService.ShowFolderBrowserDialog(System.String@,System.Boolean,System.String,System.Boolean)">
            <summary>
            Shows the folder browser dialog.
            </summary>
            <param name="directory">The directory.</param>
            <param name="showNewFolderButton">show the new folder button if set to <c>true</c> .</param>
            <param name="description">The description.</param>
            <param name="useDescriptionForTitle">Use description for title if set to <c>true</c> .</param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.FormattingTextBox">
            <summary>
            Represents a TextBox with a bindable StringFormat property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.FormatProviderProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FormattingTextBox.FormatProvider"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.StringFormatProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FormattingTextBox.StringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.FormattingTextBox.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.userIsChanging">
            <summary>
            The user is changing.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.FormattingTextBox" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.FormatProvider">
            <summary>
            Gets or sets the format provider.
            </summary>
            <value>The format provider.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.StringFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The string format changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.TextChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The text changed callback.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.ValueChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The value changed callback.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UnFormat(System.String)">
            <summary>
            Unformats the text.
            </summary>
            <param name="s">The s.</param>
            <returns>
            The un format.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UpdateText">
            <summary>
            Updates the text.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UpdateValue">
            <summary>
            Updates the value.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.LinkBlock">
            <summary>
            Provides a lightweight control for displaying hyperlinks.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LinkBlock.NavigateUriProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.LinkBlock.NavigateUri"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.LinkBlock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.LinkBlock" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.LinkBlock.NavigateUri">
            <summary>
            Gets or sets the navigation URI.
            </summary>
            <value>The navigate URI.</value>
        </member>
        <member name="M:PropertyTools.Wpf.LinkBlock.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" />�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="T:PropertyTools.Wpf.PopupBox">
            <summary>
            Represents a popup control that provides a data template for the popup.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PopupBox.PopupTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PopupBox.PopupTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PopupBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.PopupBox" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PopupBox.PopupTemplate">
            <summary>
            Gets or sets the popup template.
            </summary>
            <value>The popup template.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SliderEx">
            <summary>
            Represents a slider that calls IEditableObject.BeginEdit/EndEdit when thumb dragging.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SliderEx.OnThumbDragCompleted(System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The on thumb drag completed.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SliderEx.OnThumbDragStarted(System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The on thumb drag started.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="T:PropertyTools.Wpf.HeaderedEntrySlider">
            <summary>
            Represents a slider with header and value entry.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.HeaderProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.Header"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.EntryStringFormatProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.EntryContentAlignmentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryContentAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.LargeChangeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.LargeChange"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.MaximumProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.Maximum"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.MinimumProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.Minimum"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.SmallChangeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.SmallChange"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.HeaderWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.HeaderWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.EntryWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HeaderedEntrySlider.ValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.HeaderedEntrySlider.Value"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HeaderedEntrySlider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.HeaderedEntrySlider" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryStringFormat">
            <summary>
            Gets or sets the string format for the entry control.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryContentAlignment">
            <summary>
            Gets or sets the content alignment for the entry control.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.LargeChange">
            <summary>
            Gets or sets the large change.
            </summary>
            <value>The large change.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.SmallChange">
            <summary>
            Gets or sets the SmallChange.
            </summary>
            <value>The SmallChange.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.HeaderWidth">
            <summary>
            Gets or sets the width of the header part.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.EntryWidth">
            <summary>
            Gets or sets the width of the entry control.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.HeaderedEntrySlider.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SpinControl">
            <summary>
            Represents a spinner control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.PartDown">
            <summary>
            The part down.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.PartUp">
            <summary>
            The part up.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.CultureProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.Culture"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.DownButtonGeometryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.DownButtonGeometry"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.LargeChangeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.LargeChange"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.MaximumProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.Maximum"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.MinimumProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.Minimum"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.RepeatIntervalProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.RepeatInterval"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.SmallChangeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.SmallChange"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.SpinButtonWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.SpinButtonWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.UpButtonGeometryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.UpButtonGeometry"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.ValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.SpinControl.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.downbutton">
            <summary>
            The down button.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.upbutton">
            <summary>
            The up button.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.SpinControl" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Culture">
            <summary>
            Gets or sets the culture used when parsing the LargeChange/SmallChange properties.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.DownButtonGeometry">
            <summary>
            Gets or sets down button geometry.
            </summary>
            <value>Down button geometry.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.LargeChange">
            <summary>
            Gets or sets the large change.
            </summary>
            <value>The large change.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.RepeatInterval">
            <summary>
            Gets or sets the repeat SmallChange (milliseconds).
            </summary>
            <value>The repeat SmallChange.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.SmallChange">
            <summary>
            Gets or sets the SmallChange.
            </summary>
            <value>The SmallChange.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.SpinButtonWidth">
            <summary>
            Gets or sets the width of the spin buttons.
            </summary>
            <value>The width of the spin button.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.UpButtonGeometry">
            <summary>
            Gets or sets up button geometry.
            </summary>
            <value>Up button geometry.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.CoerceSpinnerValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the spinner value.
            </summary>
            <param name="d">The d.</param>
            <param name="basevalue">The basevalue.</param>
            <returns>
            The coerce spinner value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.SpinnerValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The spinner value changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.ChangeValue(System.Int32,System.Boolean)">
            <summary>
            Changes the value.
            </summary>
            <param name="sign">The sign of the change.</param>
            <param name="isLargeChange">The is Large Change.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.CoerceSpinnerValue(System.Object)">
            <summary>
            Coerces the spinner value.
            </summary>
            <param name="basevalue">The basevalue.</param>
            <returns>
            The coerced value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.DownbuttonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles down button clicks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.IsNumeric(System.Object)">
            <summary>
            Check if an object is of a numeric type.
            </summary>
            <param name="value">The value.</param>
            <returns>
            True if the value is of a numeric type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.UpbuttonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles up button clicks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.StackPanelEx">
            <summary>
            Represents a stack panel that counts the number of visible children.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.StackPanelEx.VisibleChildrenCountProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.StackPanelEx.VisibleChildrenCount"/> dependency property.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.StackPanelEx.VisibleChildrenCount">
            <summary>
            Gets the number of visible children.
            </summary>
            <value>The visible children count.</value>
        </member>
        <member name="M:PropertyTools.Wpf.StackPanelEx.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.StackPanel" /> element.
            </summary>
            <param name="arrangeSize">The <see cref="T:System.Windows.Size" /> that this element should use to arrange its child elements.</param>
            <returns>
            The <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.StackPanel" /> element and its child elements.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TextBlockEx">
            <summary>
            Represents a TextBlock than can be disabled.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TextBlockEx.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.TextBlockEx" /> class.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TextBoxEx">
            <summary>
            Represents a TextBox that can update the binding on enter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.MoveFocusOnEnterProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TextBoxEx.MoveFocusOnEnter"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.UpdateBindingOnEnterProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TextBoxEx.UpdateBindingOnEnter"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.ScrollToHomeOnFocusProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TextBoxEx.ScrollToHomeOnFocus"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.SelectAllOnFocusProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TextBoxEx.SelectAllOnFocus"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TextBoxEx" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.SelectAllOnFocus">
            <summary>
            Gets or sets a value indicating whether to select all on focus.
            </summary>
            <value>
              <c>true</c> if all should be selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.ScrollToHomeOnFocus">
            <summary>
            Gets or sets a value indicating whether to scroll to home on focus.
            </summary>
            <value>
            <c>true</c> if scroll is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.MoveFocusOnEnter">
            <summary>
            Gets or sets a value indicating whether MoveFocusOnEnter.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.UpdateBindingOnEnter">
            <summary>
            Gets or sets a value indicating whether UpdateBindingOnEnter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The on preview key down.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.HandleGotKeyboardFocus(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Handles the got keyboard focus event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.AllMultiValueConverter">
            <summary>
            Converts an array of <see cref="T:System.Object" /> instances to a <see cref="T:System.Boolean" /> instance by checking if all items equal the parameter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AllMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns <c>null</c>, the valid <c>null</c> value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AllMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:PropertyTools.Wpf.BoolToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Boolean" /> instances to <see cref="T:System.Windows.Visibility" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.BoolToVisibilityConverter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.BoolToVisibilityConverter.InvertVisibility">
            <summary>
            Gets or sets a value indicating whether to invert visibility.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.BoolToVisibilityConverter.NotVisibleValue">
            <summary>
            Gets or sets the not visible value.
            </summary>
            <value>The not visible value.</value>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToComponentConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color" /> instances to hex <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToComponentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToComponentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToStringConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color" /> instances to <see cref="T:System.String" /> instances..
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorToStringConverter.colors">
            <summary>
            The string to color map.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorToStringConverter.ColorMap">
            <summary>
            Gets the string to color map.
            </summary>
            <value>The color map.</value>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DataErrorInfoConverter">
            <summary>
            Gets the error message for the bound data.
            </summary>
            <remarks>Note that the instance and column(property) name must be provided in the constructor. There is probably a better way to do this....</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.DataErrorInfoConverter.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataErrorInfoConverter.columnName">
            <summary>
            The column name
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataErrorInfoConverter.#ctor(System.ComponentModel.IDataErrorInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DataErrorInfoConverter" /> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataErrorInfoConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataErrorInfoConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.FontFamilyConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.FontFamily" /> instances to <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FontFamilyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FontFamilyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanToStringConverter">
            <summary>
            Converts <see cref="T:System.TimeSpan" /> instances to <see cref="T:System.String" /> instances..
            </summary>
            <remarks>The format string can be specified as the converter parameter.</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanToStringConverter.formatter">
            <summary>
            The formatter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DefinedColorToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color" /> instances to <see cref="T:System.Windows.Visibility" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefinedColorToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefinedColorToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ValueToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Object" /> instances to <see cref="T:System.Windows.Visibility" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ValueToVisibilityConverter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ValueToVisibilityConverter.EqualsVisibility">
            <summary>
            Gets or sets the visibility to return when the value to convert equals the converter parameter.
            </summary>
            <value>The equals visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ValueToVisibilityConverter.NotEqualsVisibility">
            <summary>
            Gets or sets the visibility to return when the value to convert does not equal the converter parameter.
            </summary>
            <value>The not equals visibility.</value>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.HueToColorConverter">
            <summary>
            Converts a hue values to <see cref="T:System.Windows.Media.Color" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HueToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.HueToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ZeroToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Int32" /> instances to <see cref="T:System.Windows.Visibility" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ZeroToVisibilityConverter" /> class.
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToVisibilityConverter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ZeroToVisibilityConverter.NotZeroVisibility">
            <summary>
            Gets or sets the not <c>null</c> visibility.
            </summary>
            <value>The not <c>null</c> visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ZeroToVisibilityConverter.ZeroVisibility">
            <summary>
            Gets or sets the <c>null</c> visibility.
            </summary>
            <value>The <c>null</c> visibility.</value>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DoubleToGridLengthConverter">
            <summary>
            Converts <see cref="T:System.Double" /> instances to <see cref="T:System.Windows.GridLength" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DoubleToGridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DoubleToGridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumDescriptionConverter">
            <summary>
            Converts <see cref="T:System.Enum" /> instances to description <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.NullToBoolConverter">
            <summary>
            Null to bool value converter
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToBoolConverter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.NullToBoolConverter.NullValue">
            <summary>
            Gets or sets a value indicating whether the source value is <c>null</c>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.NullToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Visibility" /> instances to <see cref="T:System.Object" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToVisibilityConverter" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.NullToVisibilityConverter.NotNullVisibility">
            <summary>
            Gets or sets the not <c>null</c> visibility.
            </summary>
            <value>The not <c>null</c> visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.NullToVisibilityConverter.NullVisibility">
            <summary>
            Gets or sets the <c>null</c> visibility.
            </summary>
            <value>The <c>null</c> visibility.</value>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CellDefinition">
            <summary>
            Defines the content of a cell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.BindingPath">
            <summary>
            Gets or sets the binding path.
            </summary>
            <value>
            The binding path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.BindingSource">
            <summary>
            Gets or sets the binding source.
            </summary>
            <value>
            The binding source.
            </value>
            <remarks>This is used for the DataContext of the cell.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the binding mode should be one-way.
            </summary>
            <value>
            <c>true</c> if the binding mode should be one-way; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>
            The format string.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.ConverterParameter">
            <summary>
            Gets or sets the converter parameter.
            </summary>
            <value>
            The converter parameter.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.ConverterCulture">
            <summary>
            Gets or sets the converter culture.
            </summary>
            <value>
            The converter culture.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.IsEnabledBindingSource">
            <summary>
            Gets or sets the source for the IsEnabled binding.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.IsEnabledBindingPath">
            <summary>
            Gets or sets the IsEnabled binding path.
            </summary>
            <value>
            The binding path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.IsEnabledBindingParameter">
            <summary>
            Gets or sets the IsEnabled converter parameter.
            </summary>
            <value>
            The converter parameter.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.BackgroundBindingSource">
            <summary>
            Gets or sets the background source.
            </summary>
            <value>
            The binding source.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDefinition.BackgroundBindingPath">
            <summary>
            Gets or sets the background binding path.
            </summary>
            <value>
            The binding path.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.CellDefinitionFactory">
            <summary>
            Implements the default cell definition factory.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellDefinitionFactory.RegisterValueConverter(System.Type,System.Windows.Data.IValueConverter)">
            <summary>
            Registers the value converter for the specified type.
            </summary>
            <param name="forInstancesOf">The type of instances the converter is applied to.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:PropertyTools.Wpf.CellDefinitionFactory.CreateCellDefinition(PropertyTools.Wpf.CellDescriptor)">
            <summary>
            Creates the cell definition for the specified cell.
            </summary>
            <param name="d">The d.</param>
            <returns>
            The cell definition
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellDefinitionFactory.CreateCellDefinitionOverride(PropertyTools.Wpf.CellDescriptor)">
            <summary>
            Creates the cell definition object.
            </summary>
            <param name="d">The cell descriptor.</param>
            <returns>
            A cell definition.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellDefinitionFactory.ApplyProperties(PropertyTools.Wpf.CellDefinition,PropertyTools.Wpf.CellDescriptor)">
            <summary>
            Applies the properties to the specified cell definition.
            </summary>
            <param name="cd">The cell definition.</param>
            <param name="d">The cell descriptor.</param>
        </member>
        <member name="T:PropertyTools.Wpf.CellDescriptor">
            <summary>
            Contains all the data that can be used to create a <see cref="T:PropertyTools.Wpf.CellDefinition" /> in a <see cref="T:PropertyTools.Wpf.CellDefinitionFactory" />.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.PropertyDefinition">
            <summary>
            Gets or sets the property definition.
            </summary>
            <value>
            The property definition.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.Descriptor">
            <summary>
            Gets or sets the property descriptor.
            </summary>
            <value>
            The descriptor.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.BindingPath">
            <summary>
            Gets or sets the binding path.
            </summary>
            <value>
            The binding path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.BindingSource">
            <summary>
            Gets or sets the binding source.
            </summary>
            <value>
            The binding source.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellDescriptor.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.CheckCellDefinition">
            <summary>
            Defines a cell that contains a boolean property.
            </summary>
            <seealso cref="T:PropertyTools.Wpf.CellDefinition" />
        </member>
        <member name="T:PropertyTools.Wpf.ColorCellDefinition">
            <summary>
            Defines a cell that contains a color property.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.NaturalObjectComparer">
            <summary>
            Implements a generic object comparer that using natural comparison on strings.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.NaturalObjectComparer.stringComparer">
            <summary>
            The string comparer
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NaturalObjectComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ICellDefinitionFactory">
            <summary>
            Specifies a <see cref="T:PropertyTools.Wpf.CellDefinition" /> factory for the <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ICellDefinitionFactory.CreateCellDefinition(PropertyTools.Wpf.CellDescriptor)">
            <summary>
            Creates the cell definition for the specified cell.
            </summary>
            <param name="d">The cell descriptor.</param>
            <returns>
            The cell definition
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.SelectorCellDefinition">
            <summary>
            Defines a cell that contains a selectable property.
            </summary>
            <seealso cref="T:PropertyTools.Wpf.CellDefinition" />
        </member>
        <member name="P:PropertyTools.Wpf.SelectorCellDefinition.IsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is editable.
            </summary>
            <value>
            <c>true</c> if this instance is editable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SelectorCellDefinition.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>
            The items source.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SelectorCellDefinition.ItemsSourceProperty">
            <summary>
            Gets or sets the items source property.
            </summary>
            <value>
            The items source property.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SelectorCellDefinition.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
            <value>
            The selected value path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SelectorCellDefinition.DisplayMemberPath">
            <summary>
            Gets or sets the display member path.
            </summary>
            <value>
            The display member path.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.TemplateCellDefinition">
            <summary>
            Defines a cell that displays the content with data templates.
            </summary>
            <seealso cref="T:PropertyTools.Wpf.CellDefinition" />
        </member>
        <member name="P:PropertyTools.Wpf.TemplateCellDefinition.DisplayTemplate">
            <summary>
            Gets or sets the display template.
            </summary>
            <value>
            The data template.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TemplateCellDefinition.EditTemplate">
            <summary>
            Gets or sets the edit template.
            </summary>
            <value>
            The data template.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.TextCellDefinition">
            <summary>
            Defines a cell that contains a string property.
            </summary>
            <seealso cref="T:PropertyTools.Wpf.CellDefinition" />
        </member>
        <member name="P:PropertyTools.Wpf.TextCellDefinition.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.CellRange">
            <summary>
            Represents a range of cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRange.#ctor(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CellRange"/> class.
            </summary>
            <param name="cell1">The cell1.</param>
            <param name="cell2">The cell2.</param>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.TopLeft">
            <summary>
            Gets the top left cell.
            </summary>
            <value>
            The top left cell reference.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.BottomRight">
            <summary>
            Gets the bottom right cell.
            </summary>
            <value>
            The bottom right cell reference.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.TopRow">
            <summary>
            Gets the index of the top row.
            </summary>
            <value>
            The zero-based index.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.BottomRow">
            <summary>
            Gets the index of the bottom row.
            </summary>
            <value>
            The zero-based index.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.LeftColumn">
            <summary>
            Gets the index of the left column.
            </summary>
            <value>
            The zero-based index.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.RightColumn">
            <summary>
            Gets the index of the right column.
            </summary>
            <value>
            The zero-based index.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.Rows">
            <summary>
            Gets the number of rows.
            </summary>
            <value>
            The number of rows.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.CellRange.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>
            The number of columns.
            </value>
        </member>
        <member name="M:PropertyTools.Wpf.CellRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DataGridCommands">
            <summary>
            Provides a standard set of <see cref="T:PropertyTools.Wpf.DataGrid" /> related commands.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridCommands.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.DataGridCommands"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.DeleteColumns">
            <summary>
            Gets the delete columns command.
            </summary>
            <value>The delete columns command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.DeleteRows">
            <summary>
            Gets the delete rows command.
            </summary>
            <value>The delete rows command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.InsertColumns">
            <summary>
            Gets the insert columns command.
            </summary>
            <value>The insert columns command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.InsertRows">
            <summary>
            Gets the insert rows command.
            </summary>
            <value>The insert rows command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.SortAscending">
            <summary>
            Gets the sort ascending command.
            </summary>
            <value>The sort ascending command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.SortDescending">
            <summary>
            Gets the sort descending command.
            </summary>
            <value>The sort descending command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridCommands.ClearSort">
            <summary>
            Gets the clear sort command.
            </summary>
            <value>The clear sort command.</value>
        </member>
        <member name="T:PropertyTools.Wpf.IDataGridOperator">
            <summary>
            Specifies DataGrid functionality that depends on the type of items source.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.AutoGenerateColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Auto-generates the columns.
            </summary>
            <param name="owner">The data grid.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.UpdatePropertyDefinitions(PropertyTools.Wpf.DataGrid)">
            <summary>
            Updates the property definitions.
            </summary>
            <param name="owner">The data grid.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetPropertyType(PropertyTools.Wpf.PropertyDefinition,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Gets the type of the property in the specified cell.
            </summary>
            <param name="definition">The definition.</param>
            <param name="cell">The cell.</param>
            <param name="currentValue">The current value.</param>
            <returns>
            The type of the property.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetPropertyDescriptor(PropertyTools.Wpf.PropertyDefinition)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="pd">The property definition.</param>
            <returns>The property descriptor.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetBindingPath(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the binding path for the specified cell.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell.</param>
            <returns>
            The binding path
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetCellValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the value in the specified cell.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell.</param>
            <returns>The value</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetCollectionViewIndex(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Converts the items source index to a collection view index.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index in the items source.</param>
            <returns>The index in the collection view</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetItemsSourceIndex(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Converts the collection view index to an items source index.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index in the collection view.</param>
            <returns>The index in the items source</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.InsertItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <returns>
            The index of the inserted item if insertion is successful, <c>-1</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetItem(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item in the specified cell.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell reference.</param>
            <returns>
            The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.SetValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Sets value of the specified cell to the specified value.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell to change.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.TrySetCellValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Tries to set cell value in the specified cell.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the cell value was set.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetDataContext(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the data context for the specified cell.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="cell">The cell.</param>
            <returns>The context object.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.CanDeleteColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be deleted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns><c>true</c> if columns can be deleted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.CanDeleteRows(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether rows can be deleted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns><c>true</c> if rows can be deleted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.CanInsertColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be inserted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns><c>true</c> if columns can be inserted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.CanInsertRows(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether rows can be inserted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns><c>true</c> if rows can be inserted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.DeleteColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Deletes columns at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to delete.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.DeleteRows(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Deletes rows at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of rows to delete.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.InsertColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Inserts columns at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to insert.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.InsertRows(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Inserts rows at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of rows to insert.</param>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetRowCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of rows.
            </summary>
            <param name="dataGrid">The data grid.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.GetColumnCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of columns.
            </summary>
            <param name="dataGrid">The data grid.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridOperator.CanSort(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Determines whether items can be sorted by the specified column/row index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The column index if items are in rows, otherwise the row index.</param>
            <returns>
              <c>true</c> if the items can be sorted; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.WrapItemsOperator">
            <summary>
            Represents an operator for <see cref="T:PropertyTools.Wpf.DataGrid" /> when its WrapItems property is true.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WrapItemsOperator.GetRowCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of rows.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            The number.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.WrapItemsOperator.GetColumnCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of columns.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            The number.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.WrapItemsOperator.GetItemIndex(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item index for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>
            The get item index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.WrapItemsOperator.CanSort(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Determines whether items can be sorted by the specified column/row index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The column index if items are in rows, otherwise the row index.</param>
            <returns>
              <c>true</c> if the items can be sorted; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.NaturalStringComparer">
            <summary>
            Implements a natural comparer for strings.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.NaturalStringComparer.EnumerableOfObjectComparer">
            <summary>
            The comparer for sequences of objects.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.NaturalStringComparer.Digits">
            <summary>
            The regular expression used to split numbers and text.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NaturalStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.VisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Visibility" /> values.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="P:PropertyTools.Wpf.VisibilityConverter.CollapsedValue">
            <summary>
            Gets or sets the collapsed value.
            </summary>
            <value>
            The collapsed value.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.VisibilityConverter.HiddenValue">
            <summary>
            Gets or sets the hidden value.
            </summary>
            <value>
            The hidden value.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.VisibilityConverter.VisibleValue">
            <summary>
            Gets or sets the visible value.
            </summary>
            <value>
            The visible value.
            </value>
        </member>
        <member name="M:PropertyTools.Wpf.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.BindingUtilities">
            <summary>
            Provides binding utility extension methods.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.BindingUtilities.ValueToBooleanConverter">
            <summary>
            The value to boolean converter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BindingUtilities.SetIsEnabledBinding(System.Windows.FrameworkElement,System.String,System.Object,System.Object)">
            <summary>
            Binds the IsEnabled property of the specified element to the specified property and value.
            </summary>
            <param name="element">The element.</param>
            <param name="path">The path.</param>
            <param name="parameter">The converter parameter (optional).</param>
            <param name="bindingSource">The binding source (optional).</param>
        </member>
        <member name="T:PropertyTools.Wpf.ListListOperator">
            <summary>
            Represents an operator for <see cref="T:PropertyTools.Wpf.DataGrid" /> when its ItemsSource is of type <see cref="T:System.Collections.IList" />&gt;<see cref="T:System.Collections.IList" />&lt;.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.CanDeleteColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be deleted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            <c>true</c> if columns can be deleted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.CanInsertColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be inserted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            <c>true</c> if columns can be inserted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.DeleteItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Deletes the item at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <returns>
            <c>true</c> if rows can be inserted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.DeleteColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Deletes the columns.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to delete.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.InsertColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Inserts the columns.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to insert.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.InsertColumnHeader(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Insert column header to ColumnHeadersSource.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The position.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.GenerateColumnDefinitions(System.Collections.IList)">
            <summary>
            Generate column definitions based on a list of items.
            </summary>
            <param name="list">The list of items.</param>
            <returns>A sequence of column definitions.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.GetItem(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item in cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell reference.</param>
            <returns>
            The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.InsertItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Inserts item to <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index.</param>
            <returns>
            The index of the inserted item if insertion is successful, <c>-1</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.SetValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Sets value to item in cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell reference.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.GetBindingPath(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the binding path for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>
            The binding path
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListListOperator.CanSort(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Determines whether items can be sorted by the specified column/row index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The column index if items are in rows, otherwise the row index.</param>
            <returns>
              <c>true</c> if the items can be sorted; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DataGridOperator">
            <summary>
            Represents an abstract base class for <see cref="T:PropertyTools.Wpf.DataGrid" /> operators.
            </summary>
            <remarks>An operator implements operations for a <see cref="T:PropertyTools.Wpf.DataGrid" /> based on the different data its 
            <see cref="P:PropertyTools.Wpf.DataGrid.ItemsSource" /> binds to.</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.DataGridOperator.descriptors">
            <summary>
            The property descriptors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridOperator.DefaultHorizontalAlignment">
            <summary>
            Gets or sets the default horizontal alignment.
            </summary>
            <value>
            The default horizontal alignment.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGridOperator.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width.
            </summary>
            <value>
            The default width of the columns.
            </value>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CanDeleteColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be deleted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
              <c>true</c> if columns can be deleted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CanDeleteRows(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether rows can be deleted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
              <c>true</c> if rows can be deleted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CanInsertColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether columns can be inserted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
              <c>true</c> if columns can be inserted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CanInsertRows(PropertyTools.Wpf.DataGrid)">
            <summary>
            Determines whether rows can be inserted.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
              <c>true</c> if rows can be inserted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.DeleteColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Deletes the columns.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to delete.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.DeleteRows(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Deletes the rows.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of rows to delete.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.InsertColumns(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Inserts columns at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of columns to insert.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.InsertRows(PropertyTools.Wpf.DataGrid,System.Int32,System.Int32)">
            <summary>
            Inserts rows at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <param name="n">The number of rows to insert.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetItemCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of items.
            </summary>
            <param name="owner">The owner.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetRowCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of rows.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            The number.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetColumnCount(PropertyTools.Wpf.DataGrid)">
            <summary>
            Gets the number of columns.
            </summary>
            <param name="owner">The data grid.</param>
            <returns>
            The number.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CanSort(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Determines whether items can be sorted by the specified column/row index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The column index if items are in rows, otherwise the row index.</param>
            <returns>
              <c>true</c> if the items can be sorted; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetCellValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the value in the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>The value</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetPropertyType(PropertyTools.Wpf.PropertyDefinition,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Gets the type of the property in the specified cell.
            </summary>
            <param name="definition">The definition.</param>
            <param name="cell">The cell.</param>
            <param name="currentValue">The current value.</param>
            <returns>
            The type of the property.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetItemsSourceIndex(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Converts the collection view index to an items source index.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index in the collection view.</param>
            <returns>The index in the items source</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetCollectionViewIndex(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Converts the items source index to a collection view index.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index in the items source.</param>
            <returns>The index in the collection view</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.AutoGenerateColumns(PropertyTools.Wpf.DataGrid)">
            <summary>
            Auto-generates the columns.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.UpdatePropertyDefinitions(PropertyTools.Wpf.DataGrid)">
            <summary>
            Updates the property definitions.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetPropertyDescriptor(PropertyTools.Wpf.PropertyDefinition)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="pd">The property definition.</param>
            <returns>The property descriptor.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.TrySetCellValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Tries to set cell value in the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the cell value was set.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetDataContext(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the data context for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>The context object.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetItem(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item in the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell reference.</param>
            <returns>
            The <see cref="T:System.Object" />.
            </returns>au
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.InsertItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Inserts an item to <see cref="T:PropertyTools.Wpf.DataGrid" /> at the specified index.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index.</param>
            <returns>
            The index of the inserted item if insertion is successful, <c>-1</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetBindingPath(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the binding path for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>
            The binding path
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.SetValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Sets value of the specified cell to the specified value.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell to change.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.DeleteItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Deletes the item at the specified index.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if rows can be inserted; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GetItemType(System.Collections.IList)">
            <summary>
            Gets the type of the items in the items source.
            </summary>
            <param name="itemsSource">The items source.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.CreateItem(PropertyTools.Wpf.DataGrid,System.Type)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="owner">The data grid.</param>
            <param name="itemType">The type.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.SetPropertiesFromDescriptor(PropertyTools.Wpf.PropertyDefinition,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Sets the properties from descriptor.
            </summary>
            <param name="pd">The property definition.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.GenerateColumnDefinitions(System.Collections.IList)">
            <summary>
            Generates column definitions based on a list of items.
            </summary>
            <param name="list">The list.</param>
            <returns>A sequence of column definitions.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to convert an object to the specified type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="convertedValue">The converted value.</param>
            <returns>
            True if conversion was successful.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.TryGetByIndex(System.Collections.IEnumerable,System.Int32,System.Object@)">
            <summary>
            Tries to get the item of the specified index.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns>
              <c>false</c> if the index was not found in the sequence; otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridOperator.TryGetIndex(System.Collections.IEnumerable,System.Object,System.Int32@)">
            <summary>
            Tries to get the index of the specified item.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns><c>false</c> if the item was not found in the sequence; otherwise <c>true</c>.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.TemplateColumnDefinition">
            <summary>
            Defines a template column in a <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TemplateColumnDefinition.CellTemplate">
            <summary>
            Gets or sets the cell template.
            </summary>
            <value>A data template that contains display controls.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TemplateColumnDefinition.CellEditingTemplate">
            <summary>
            Gets or sets the cell template used when editing the cell.
            </summary>
            <value>A data template that contains edit controls.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ListOperator">
            <summary>
            Represents an operator for <see cref="T:PropertyTools.Wpf.DataGrid" /> when its ItemsSource is of type <see cref="T:System.Collections.IList" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.GenerateColumnDefinitions(System.Collections.IList)">
            <summary>
            Generate column definitions based on a list of items.
            </summary>
            <param name="list">The list of items.</param>
            <returns>A sequence of column definitions.</returns>
            <remarks>The constraint is that all the items in the ItemsSource's should be of the same type.
            For non built in type, a
            <code>public static T Parse(string s, IFormatProvider formatProvider)</code> and
            <code>public string ToString(string format, IFormatProvider formatProvider)</code> should be defined.
            interface type is not acceptable for no object instance can be created based on it.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.GetItem(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item in cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell reference.</param>
            <returns>
            The item <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.InsertItem(PropertyTools.Wpf.DataGrid,System.Int32)">
            <summary>
            Inserts item to <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">The index.</param>
            <returns>
            The index of the inserted item if insertion is successful, <c>-1</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.SetValue(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Sets value to item in cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell reference.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.GetItemIndex(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the item index for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>
            The get item index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.GetBindingPath(PropertyTools.Wpf.DataGrid,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the binding path for the specified cell.
            </summary>
            <param name="owner">The owner.</param>
            <param name="cell">The cell.</param>
            <returns>
            The binding path
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ListOperator.GetPropertiesFromInstance(System.Collections.IList,System.Type)">
            <summary>
            Gets property descriptors from one instance.
            </summary>
            <param name="items">The items.</param>
            <param name="itemType">The target item type.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.AutoFiller">
            <summary>
            Provides extrapolation functionality for the auto filler.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AutoFiller.getCellValue">
            <summary>
            The get cell value function.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AutoFiller.trySetCellValue">
            <summary>
            The set cell value function.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.#ctor(System.Func{PropertyTools.Wpf.CellRef,System.Object},System.Func{PropertyTools.Wpf.CellRef,System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AutoFiller" /> class.
            </summary>
            <param name="getCellValue">The get cell value.</param>
            <param name="trySetCellValue">The try set cell value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.AutoFill(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            The auto fill.
            </summary>
            <param name="currentCell">The current cell.</param>
            <param name="selectionCell">The selection cell.</param>
            <param name="autoFillRef">The auto fill ref.</param>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.TryExtrapolate(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.Object@)">
            <summary>
            Tries to extrapolate the specified cells.
            </summary>
            <param name="cell">The cell to extrapolate.</param>
            <param name="currentCell">The current cell.</param>
            <param name="selectionCell">The selection cell.</param>
            <param name="autoFillRef">The auto fill cell reference.</param>
            <param name="result">The result.</param>
            <returns>
            True if extrapolation was successful.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.PeriodicClamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value between i0 and i1.
            </summary>
            <param name="i">The input.</param>
            <param name="i0">The minimum value.</param>
            <param name="i1">The maximum value.</param>
            <returns>
            The periodic clamp.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.TryExtrapolate(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.Object@)">
            <summary>
            Tries to extrapolate.
            </summary>
            <param name="cell">The cell.</param>
            <param name="p1">The first source cell.</param>
            <param name="p2">The second source cell.</param>
            <param name="result">The result.</param>
            <returns>
            True is extrapolation was successful.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot">
            <summary>
            Captures a screen shot using gdi32 functions.
            </summary>
            <remarks>See http://stackoverflow.com/questions/1736287/capturing-a-window-with-wpf</remarks>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations">
            <summary>
            The ternary raster operations.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCCOPY">
            <summary>
            dest = source
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCPAINT">
            <summary>
            dest = source OR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCAND">
            <summary>
            dest = source AND dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCINVERT">
            <summary>
            dest = source XOR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCERASE">
            <summary>
            dest = source AND (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCCOPY">
            <summary>
            dest = (NOT source)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCERASE">
            <summary>
            dest = (NOT src) AND (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGECOPY">
            <summary>
            dest = (source AND pattern)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGEPAINT">
            <summary>
            dest = (NOT source) OR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATCOPY">
            <summary>
            dest = pattern
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATPAINT">
            <summary>
            dest = DPSnoo
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATINVERT">
            <summary>
            dest = pattern XOR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.DSTINVERT">
            <summary>
            dest = (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.BLACKNESS">
            <summary>
            dest = BLACK
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.WHITENESS">
            <summary>
            dest = WHITE
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.Capture(System.Windows.Rect)">
            <summary>
            Captures the specified rectangle from the screen.
            <returns>
            A bitmap.
            </returns>
            </summary>
            <param name="area">The area to capture.</param>
            <returns>
            A bitmap.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CorrectGetPosition(System.Windows.Media.Visual)">
            <summary>
            Gets the cursor position relative to the specified visual.
            </summary>
            <param name="relativeTo">The visual to relate to.</param>
            <returns>
            A <see cref="T:System.Windows.Point" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetMouseScreenPosition">
            <summary>
            The get mouse screen position.
            </summary>
            <returns>
            The <see cref="T:System.Windows.Point" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetCursorPos(PropertyTools.Wpf.CaptureScreenshot.Win32Point@)">
            <summary>
            The get cursor pos.
            </summary>
            <param name="pt">The pt.</param>
            <returns>
            The get cursor pos.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations)">
            <summary>
            The bit blt.
            </summary>
            <param name="hdc">The hdc.</param>
            <param name="nXDest">The n x dest.</param>
            <param name="nYDest">The n y dest.</param>
            <param name="nWidth">The n width.</param>
            <param name="nHeight">The n height.</param>
            <param name="hdcSrc">The hdc src.</param>
            <param name="nXSrc">The n x src.</param>
            <param name="nYSrc">The n y src.</param>
            <param name="dwRop">The dw rop.</param>
            <returns>
            The bit blt.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The create bitmap.
            </summary>
            <param name="nWidth">The n width.</param>
            <param name="nHeight">The n height.</param>
            <param name="cPlanes">The c planes.</param>
            <param name="cBitsPerPel">The c bits per pel.</param>
            <param name="lpvBits">The lpv bits.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The create compatible bitmap.
            </summary>
            <param name="hdc">The hdc.</param>
            <param name="nWidth">The n width.</param>
            <param name="nHeight">The n height.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The create compatible dc.
            </summary>
            <param name="hdc">The hdc.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.DeleteObject(System.IntPtr)">
            <summary>
            The delete object.
            </summary>
            <param name="hObject">The h object.</param>
            <returns>
            The delete object.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetDC(System.IntPtr)">
            <summary>
            The get dc.
            </summary>
            <param name="hWnd">The h wnd.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The release dc.
            </summary>
            <param name="hWnd">The h wnd.</param>
            <param name="hDC">The h dc.</param>
            <returns>
            The release dc.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The select object.
            </summary>
            <param name="hdc">The hdc.</param>
            <param name="hgdiobj">The hgdiobj.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot.Win32Point">
            <summary>
            The win 32 point.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.Win32Point.X">
            <summary>
            The x.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.Win32Point.Y">
            <summary>
            The y.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FormattedTimeSpanParser">
            <summary>
            TimeSpan parser that use a format string to evaluate the input string.
            </summary>
            <remarks>Supports the following format codes: D, DD, H, HH, M, MM, S, SS, d, dd, h, hh, m, mm, s, ss, f, ff, fff</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.FormattedTimeSpanParser.specialCharacters">
            <summary>
            The special characters.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattedTimeSpanParser.conversionExpression">
            <summary>
            The conversion expression.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattedTimeSpanParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.FormattedTimeSpanParser" /> class.
            </summary>
            <param name="formatString">The format string.</param>
        </member>
        <member name="P:PropertyTools.Wpf.FormattedTimeSpanParser.Expression">
            <summary>
            Gets or sets the regular expression.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattedTimeSpanParser.Parse(System.String)">
            <summary>
            Parses the specified time span string.
            </summary>
            <param name="value">The value.</param>
            <returns>
            A time span.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CellRefConverter">
            <summary>
            The cell ref converter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRefConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRefConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColumnDefinition">
            <summary>
            Defines a column in a <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColumnDefinition" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.Width">
            <summary>
            Gets or sets the column width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:PropertyTools.Wpf.RowDefinition">
            <summary>
            Defines a row in a <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RowDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.RowDefinition"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.RowDefinition.Height">
            <summary>
            Gets or sets the row height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:PropertyTools.Wpf.IDataGridControlFactory">
            <summary>
            Specifies a control factory for the <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridControlFactory.CreateDisplayControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the display control with data binding.
            </summary>
            <param name="cellDefinition">The cell definition.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IDataGridControlFactory.CreateEditControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the edit control with data binding.
            </summary>
            <param name="cellDefinition">The cell definition.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyDefinition">
            <summary>
            Provides a base class for column and row definitions in a <see cref="T:PropertyTools.Wpf.DataGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyDefinition" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.ConverterCulture">
            <summary>
            Gets or sets the converter culture.
            </summary>
            <value>The converter culture.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.ConverterParameter">
            <summary>
            Gets or sets the converter parameter.
            </summary>
            <value>The converter parameter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>The tooltip.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.IsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is editable (for ComboBox).
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.ItemsSource">
            <summary>
            Gets or sets the items source (for ComboBox).
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.ItemsSourceProperty">
            <summary>
            Gets or sets the property name of an items source (for ComboBox).
            </summary>
            <value>The items source property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.SelectedValuePath">
            <summary>
            Gets or sets the selected value path (for ComboBox).
            </summary>
            <value>
            The selected value path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.DisplayMemberPath">
            <summary>
            Gets or sets the display member path.
            </summary>
            <value>
            The display member path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.MaxLength">
            <summary>
            Gets or sets the max length (for TextBox).
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.IsEnabledByProperty">
            <summary>
            Gets or sets the name of a property that determines the state of the cell.
            </summary>
            <value>
            The name of the related property.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.IsEnabledByValue">
            <summary>
            Gets or sets the value that enables the cell.
            </summary>
            <remarks>This property is used if the <see cref="P:PropertyTools.Wpf.PropertyDefinition.IsEnabledByProperty"/> property is set.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.Background">
            <summary>
            Gets or sets the background brush.
            </summary>
            <value>
            The background.
            </value>
            <remarks>If set, this overrides <see cref="P:PropertyTools.Wpf.PropertyDefinition.BackgroundProperty" />.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.BackgroundProperty">
            <summary>
            Gets or sets the background property.
            </summary>
            <value>
            The background property.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDefinition.CanSort">
            <summary>
            Gets or sets a value indicating whether the items can be sorted by this column/row.
            </summary>
            <value>
            <c>true</c> if items can be sorted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.DataGrid">
            <summary>
            Displays enumerable data in a customizable grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CustomSortProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CustomSort"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CreateColumnHeaderProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CreateColumnHeader"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CreateItemProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CreateItem"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.AddItemHeaderProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.AddItemHeader"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.AlternatingRowsBackgroundProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.AlternatingRowsBackground"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.AutoGenerateColumnsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.AutoGenerateColumns"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.AutoInsertProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.AutoInsert"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CanClearProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CanClear"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CanDeleteProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CanDelete"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CanInsertProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CanInsert"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CanResizeColumnsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CanResizeColumns"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CanResizeRowsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CanResizeRows"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.MultiChangeInChangedColumnOnlyProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.MultiChangeInChangedColumnOnly"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ColumnHeaderHeightProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ColumnHeaderHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.SheetContextMenuProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.SheetContextMenu"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ColumnsContextMenuProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ColumnsContextMenu"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ControlFactoryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ControlFactory"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CellDefinitionFactoryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CellDefinitionFactory"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.CurrentCellProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.CurrentCell"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.DefaultColumnWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.DefaultColumnWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.DefaultHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.DefaultHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.DefaultRowHeightProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.DefaultRowHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.IsEasyInsertByKeyboardEnabledProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.IsEasyInsertByKeyboardEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.IsEasyInsertByMouseEnabledProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.IsEasyInsertByMouseEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.GridLineBrushProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.GridLineBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.HeaderBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.HeaderBorderBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.InputDirectionProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.InputDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.IsAutoFillEnabledProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.IsAutoFillEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.IsMoveAfterEnterEnabledProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.IsMoveAfterEnterEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ItemHeaderPropertyPathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ItemHeaderPropertyPath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ItemsSource"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.RowHeadersSourceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.RowHeadersSource"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ColumnHeadersSourceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ColumnHeadersSource"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.RowHeadersFormatStringProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.RowHeadersFormatString"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.ColumnHeadersFormatStringProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.ColumnHeadersFormatString"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.RowHeaderWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.RowHeaderWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.RowsContextMenuProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.RowsContextMenu"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.SelectedItems"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.SelectionCellProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.SelectionCell"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.WrapItemsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.DataGrid.WrapItems"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartAutoFillBox">
            <summary>
            The auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartAutoFillSelection">
            <summary>
            The auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartColumnGrid">
            <summary>
            The column grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartColumnScrollViewer">
            <summary>
            The column scroll viewer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartColumnSelectionBackground">
            <summary>
            The column selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartCurrentBackground">
            <summary>
            The current background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartGrid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartRowGrid">
            <summary>
            The row grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartRowScrollViewer">
            <summary>
            The row scroll viewer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartRowSelectionBackground">
            <summary>
            The row selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartSelection">
            <summary>
            The selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartSelectionBackground">
            <summary>
            The selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartSheetGrid">
            <summary>
            The sheet grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartSheetScrollViewer">
            <summary>
            The sheet scroll viewer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.PartTopLeft">
            <summary>
            The top left cell.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.HorizontalScrollBarVisibilityConverter">
            <summary>
            The horizontal scroll bar visibility to height converter
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.cellMap">
            <summary>
            The cell map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.columnHeaderMap">
            <summary>
            The column header map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.rowHeaderMap">
            <summary>
            The row header map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.sortDescriptions">
            <summary>
            The sort descriptors
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.sortDescriptionMarkers">
            <summary>
            The sort description markers
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.autoFillBox">
            <summary>
            The auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.autoFillCell">
            <summary>
            The auto fill cell.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.autoFillSelection">
            <summary>
            The auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.autoFillToolTip">
            <summary>
            The auto fill tool tip.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.autoFiller">
            <summary>
            The auto filler.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.cellInsertionIndex">
            <summary>
            The index in the sheet grid where new cells can be inserted.
            </summary>
            <remarks>The selection and auto fill controls should always be at the end of the sheetGrid children collection.</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.columnGrid">
            <summary>
            The column grid control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.rowGrid">
            <summary>
            The row grid control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.columnScrollViewer">
            <summary>
            The column scroll view control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.columnSelectionBackground">
            <summary>
            The column selection background control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.currentBackground">
            <summary>
            The current background control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.currentEditControl">
            <summary>
            The current editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.editingCells">
            <summary>
            The editing cells.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.endPressed">
            <summary>
            The end pressed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.sheetGrid">
            <summary>
            The sheet grid control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.rowScrollViewer">
            <summary>
            The row scroll viewer control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.rowSelectionBackground">
            <summary>
            The row selection background control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.selection">
            <summary>
            The selection control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.selectionBackground">
            <summary>
            The selection background control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.sheetScrollViewer">
            <summary>
            The sheet scroll viewer control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.subscribedCollection">
            <summary>
            Reference to the collection that has subscribed to the INotifyCollectionChanged event.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.topLeft">
            <summary>
            The top/left control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.suspendCollectionChangedNotifications">
            <summary>
            Flag used for collection changed notification suspension.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DataGrid.synchronizedCollection">
            <summary>
            The synchronized collection
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.DataGrid" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DataGrid" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.AddItemHeader">
            <summary>
            Gets or sets the header used for the add item row/column. Default is "*".
            </summary>
            <value>The add item header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.AlternatingRowsBackground">
            <summary>
            Gets or sets the alternating rows background brush.
            </summary>
            <value>The alternating rows background.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.AutoFillCell">
            <summary>
            Gets or sets the auto fill cell.
            </summary>
            <value>The auto fill cell.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.AutoGenerateColumns">
            <summary>
            Gets or sets a value indicating whether to auto generate columns.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.AutoInsert">
            <summary>
            Gets or sets a value indicating whether to allow automatic insert mode.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanClear">
            <summary>
            Gets or sets a value indicating whether this grid can clear cells.
            </summary>
            <value><c>true</c> if this instance can clear; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanDelete">
            <summary>
            Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value><c>true</c> if this instance can delete; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanInsert">
            <summary>
            Gets or sets a value indicating whether this instance can insert.
            </summary>
            <value><c>true</c> if this instance can insert; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanResizeColumns">
            <summary>
            Gets or sets a value indicating whether this instance can resize columns.
            </summary>
            <value><c>true</c> if this instance can resize columns; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanResizeRows">
            <summary>
            Gets or sets a value indicating whether this instance can resize rows.
            </summary>
            <value><c>true</c> if this instance can resize rows; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.MultiChangeInChangedColumnOnly">
            <summary>
            Gets or sets a value indicating whether only cells in the changed column should be changed when changing value for a selection.
            </summary>
            <value><c>true</c> if only cells in the current column should be changed; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ColumnDefinitions">
            <summary>
            Gets the column definitions.
            </summary>
            <value>The column definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ColumnHeaderHeight">
            <summary>
            Gets or sets the height of the column headers.
            </summary>
            <value>The height of the column header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ColumnsContextMenu">
            <summary>
            Gets or sets the columns context menu.
            </summary>
            <value>The columns context menu.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.SheetContextMenu">
            <summary>
            Gets or sets the columns context menu.
            </summary>
            <value>The columns context menu.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ControlFactory">
            <summary>
            Gets or sets the control factory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CellDefinitionFactory">
            <summary>
            Gets or sets the cell definition factory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CreateItem">
            <summary>
            Gets or sets the create item function.
            </summary>
            <value>The create item.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CustomSort">
            <summary>
            Gets or sets the custom sort comparer.
            </summary>
            <value>The custom sort comparer.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CreateColumnHeader">
            <summary>
            Gets or sets the create column header function.
            </summary>
            <value>The create column header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CurrentCell">
            <summary>
            Gets or sets the current cell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width.
            </summary>
            <value>The default width of the column.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.DefaultHorizontalAlignment">
            <summary>
            Gets or sets the default horizontal alignment.
            </summary>
            <value>The default horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.DefaultRowHeight">
            <summary>
            Gets or sets the default height of the row.
            </summary>
            <value>The default height of the row.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.IsEasyInsertByKeyboardEnabled">
            <summary>
            Gets or sets a value indicating whether easy insert by keyboard (press enter/down/right to add new rows/columns) is enabled.
            </summary>
            <value><c>true</c> if easy insert is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.IsEasyInsertByMouseEnabled">
            <summary>
            Gets or sets a value indicating whether easy insert by mouse (mouse down outside existing rows/columns) is enabled.
            </summary>
            <value><c>true</c> if easy insert is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.GridLineBrush">
            <summary>
            Gets or sets the grid line brush.
            </summary>
            <value>The grid line brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.HeaderBorderBrush">
            <summary>
            Gets or sets the header border brush.
            </summary>
            <value>The header border brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.InputDirection">
            <summary>
            Gets or sets the input direction (the moving direction of the current cell when Enter is pressed).
            </summary>
            <value>The input direction.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.IsAutoFillEnabled">
            <summary>
            Gets or sets a value indicating whether the auto fill is enabled or not.
            </summary>
            <value>If auto fill is enabled, <c>true</c>; otherwise <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.IsMoveAfterEnterEnabled">
            <summary>
            Gets or sets a value indicating whether the current cell will change after the user has pressed Enter.
            </summary>
            <value>If the feature is enabled, <c>true</c>; otherwise <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ItemHeaderPropertyPath">
            <summary>
            Gets or sets the binding path to the item headers (row or column headers, depending on the <see cref="P:PropertyTools.Wpf.DataGrid.ItemsInRows" /> property.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.RowHeadersSource">
            <summary>
            Gets or sets the row headers source.
            </summary>
            <value>The row headers source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ColumnHeadersSource">
            <summary>
            Gets or sets the column headers source.
            </summary>
            <value>The column headers source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.RowHeadersFormatString">
            <summary>
            Gets or sets the row headers format string.
            </summary>
            <value>The row headers format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ColumnHeadersFormatString">
            <summary>
            Gets or sets the column headers format string.
            </summary>
            <value>The column headers format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.RowDefinitions">
            <summary>
            Gets the row definitions.
            </summary>
            <value>The row definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.RowHeaderWidth">
            <summary>
            Gets or sets the width of the row headers.
            </summary>
            <value>The width of the row header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.RowsContextMenu">
            <summary>
            Gets or sets the rows context menu.
            </summary>
            <value>The rows context menu.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.SelectedCells">
            <summary>
            Gets the selected cells.
            </summary>
            <value>The selected cells.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.SelectionCell">
            <summary>
            Gets or sets the cell defining the selection area. The selection area is defined by the CurrentCell and SelectionCell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.WrapItems">
            <summary>
            Gets or sets a value indicating whether to wrap items in the defined columns.
            </summary>
            <value><c>true</c> if items should be wrapped; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CollectionView">
            <summary>
            Gets the collection view.
            </summary>
            <value>
            The collection view.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ItemsInRows">
            <summary>
            Gets a value indicating whether to use rows for the items.
            </summary>
            <value><c>true</c> if the items are in rows; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The number of columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.Rows">
            <summary>
            Gets the number of rows.</summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.ItemsInColumns">
            <summary>
            Gets a value indicating whether to use columns for the items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.Operator">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.PropertyDefinitions">
            <summary>
            Gets the row/column definitions.
            </summary>
            <value>The row/column definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanDeleteColumns">
            <summary>
            Gets a value indicating whether this instance can delete columns.
            </summary>
            <value><c>true</c> if this instance can delete columns; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanDeleteRows">
            <summary>
            Gets a value indicating whether this instance can delete rows.
            </summary>
            <value><c>true</c> if this instance can delete rows; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanInsertColumns">
            <summary>
            Gets a value indicating whether this instance can insert columns.
            </summary>
            <value><c>true</c> if this instance can insert columns; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.DataGrid.CanInsertRows">
            <summary>
            Gets a value indicating whether this instance can insert rows.
            </summary>
            <value><c>true</c> if this instance can insert rows; otherwise, <c>false</c> .</value>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Paste">
            <summary>
            Pastes the content from the clipboard to the selected cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetPropertyDefinition(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the column/row definition for the specified cell.
            </summary>
            <param name="cell">The cell reference.</param>
            <returns>
            The column/row definition.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.PasteOverride">
            <summary>
            Implements the paste operation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SetValues(System.Object[0:,0:],PropertyTools.Wpf.CellRange)">
            <summary>
            Sets the values in the specified range.
            </summary>
            <param name="values">The values.</param>
            <param name="range">The range.</param>
            <returns>The range that was actually set.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetClipboardData">
            <summary>
            Gets the clipboard data.
            </summary>
            <returns>A two-dimensional array of values.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ScrollIntoView(PropertyTools.Wpf.CellRef)">
            <summary>
            Scroll the specified cell into view.
            </summary>
            <param name="cellRef">The cell reference.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CopyOverride">
            <summary>
            Implements the copy operation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CutOverride">
            <summary>
            Implements the cut operation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetSelectionRange">
            <summary>
            Gets the selection cell range.
            </summary>
            <returns>The cell range.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Copy(System.String)">
            <summary>
            Copies the selected cells to the clipboard.
            </summary>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.FormatCellString(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Gets the formatted string value for the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns>
            The cell string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ToCsv(PropertyTools.Wpf.CellRange,System.String,System.Boolean)">
            <summary>
            Exports the grid to comma separated values.
            </summary>
            <param name="range">The range.</param>
            <param name="separator">The separator.</param>
            <param name="includeHeader">Include a header if set to <c>true</c>.</param>
            <returns>
            The comma separated values string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse left button down events.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse left button up events.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse move events.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles mouse wheel preview events.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handles text input events.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles KeyDown events on the grid.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CreateOperator">
            <summary>
            Creates the operator for the current items source.
            </summary>
            <returns>The operator.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.TextToArray(System.String)">
            <summary>
            Splits a string separated by \n and \t into an array.
            </summary>
            <param name="text">The text.</param>
            <returns>
            An 2-dimensional array of strings.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ClearOverride">
            <summary>
            Implements the clear operation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetDefaultValue(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the default value for the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetCellValues(PropertyTools.Wpf.CellRange)">
            <summary>
            Gets the cell values of the specified cell range.
            </summary>
            <param name="range">The range.</param>
            <returns>
            An array of cell values.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetCellStrings(PropertyTools.Wpf.CellRange,System.Object[0:,0:])">
            <summary>
            Gets the string values of the specified cell range.
            </summary>
            <param name="range">The range.</param>
            <param name="values">The values (optional).</param>
            <returns>
            An array of cell strings.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AreAllElementsSerializable(System.Object[0:,0:])">
            <summary>
            Determines whether all elements in the specified array are serializable.
            </summary>
            <param name="array">The array.</param>
            <returns>
            <c>true</c> if all elements of the array are serializable, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between a minimum and maximum limit.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CsvEncodeString(System.String)">
            <summary>
            Encodes the specified string for use in a comma separated value file.
            </summary>
            <param name="input">The input string.</param>
            <returns>
            The encoded string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.FormatValue(System.Object,System.String)">
            <summary>
            Formats the specified value with the specified format string.
            </summary>
            <param name="value">The value.</param>
            <param name="formatString">The format string.</param>
            <returns>
            The format value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SetElementPosition(System.Windows.UIElement,PropertyTools.Wpf.CellRef)">
            <summary>
            The set element position.
            </summary>
            <param name="element">The element.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CoerceCurrentCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the current cell.
            </summary>
            <param name="d">The <see cref="T:System.Windows.DependencyObject" />.</param>
            <param name="basevalue">The base value.</param>
            <returns>
            The coerced current cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CoerceSelectionCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selection cell.
            </summary>
            <param name="sender">The sender.</param>
            <param name="basevalue">The base value.</param>
            <returns>
            The coerced selection cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetCell(System.Windows.Point,System.Boolean,PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the cell reference for the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="isInAutoFillMode">if set to <c>true</c> [is in auto fill mode].</param>
            <param name="relativeTo">The relative to.</param>
            <returns>
            The cell reference.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetCellElement(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the element at the specified cell.
            </summary>
            <param name="cellRef">The cell reference.</param>
            <returns>
            The element, or <c>null</c> if the cell was not found.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetCellValue(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the cell value from the Content property for the specified cell.
            </summary>
            <param name="cell">The cell reference.</param>
            <returns>
            The cell value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetPosition(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the position of the specified cell.
            </summary>
            <param name="cellRef">The cell reference.</param>
            <returns>
            The upper-left position of the cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RemoveEditControl">
            <summary>
            Removes the current editor control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.InsertItem(System.Int32,System.Boolean)">
            <summary>
            Inserts an item.
            </summary>
            <param name="index">The index.</param>
            <param name="updateGrid">Determines whether the grid should be updated.</param>
            <returns>
            The actual index of the inserted item, <c>-1</c> if no item was inserted.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ChangeCurrentCell(System.Int32,System.Int32)">
            <summary>
            Changes the current cell with the specified delta.
            </summary>
            <param name="deltaRows">The change in rows.</param>
            <param name="deltaColumns">The change in columns.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ShowTextBoxEditControl">
            <summary>
            Shows the text box editor.
            </summary>
            <returns>
            <c>true</c> if the text editor was shown, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OpenComboBoxControl">
            <summary>
            Opens the combo box control.
            </summary>
            <returns>
            <c>true</c> if the combo box was shown, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.TrySetCellValue(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Tries to set the value in the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns>
            True if the value was set.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CreateDisplayControl(PropertyTools.Wpf.CellRef)">
            <summary>
            Creates the display control for the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>
            The display control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CreateEditControl(PropertyTools.Wpf.CellRef)">
            <summary>
            Creates the edit control for the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>
            The edit control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ShowEditControl">
            <summary>
            Shows the edit control for the current cell.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateCellContent(PropertyTools.Wpf.CellRef)">
            <summary>
            Updates the content of the specified cell.
            </summary>
            <param name="cellRef">The cell reference.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CurrentCellSourceUpdated(PropertyTools.Wpf.CellRef)">
            <summary>
            Handles changes in the current cell.
            </summary>
            <param name="changedCell">The cell that was changed.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AddDisplayControl(PropertyTools.Wpf.CellRef)">
            <summary>
            Adds the display control for the specified cell.
            </summary>
            <param name="cellRef">The cell reference.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CreateCellDescriptor(PropertyTools.Wpf.CellRef)">
            <summary>
            Creates the cell descriptor for the specified cell.
            </summary>
            <param name="cell">The cell.</param>
            <returns>A cell descriptor.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.InsertDisplayControl(PropertyTools.Wpf.CellRef)">
            <summary>
            Inserts the display control for the specified cell.
            </summary>
            <param name="cellRef">The cell reference.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AddItemCellMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse left button down events on the add item cell.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AutoFillBoxMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down events on the auto fill box.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnGridMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down events on the column grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnGridMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse up events on the column grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse move events on the column grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnScrollViewerScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            Handles changes in the column scroll viewer.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnSplitterChangeCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the column splitter change completed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="dragCompletedEventArgs">The drag completed event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnSplitterChangeDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the column splitter change delta event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnSplitterChangeStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The column splitter change started.
            </summary>
            <param name="sender">The sender.</param>
            <param name="dragStartedEventArgs">The drag started event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ColumnSplitterDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column splitter double click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Clear">
            <summary>
            Clears the content in the selected cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.DeleteColumns">
            <summary>
            Deletes the selected columns.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.DeleteRows">
            <summary>
            Deletes the selected rows.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ClearSort">
            <summary>
            Clears the sort descriptions.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Sort(System.ComponentModel.ListSortDirection,System.Boolean)">
            <summary>
            Sorts the selected columns/rows in the specified direction.
            </summary>
            <param name="direction">The sort direction.</param>
            <param name="append">Append the sort description if set to <c>true</c>.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateCollectionView">
            <summary>
            Updates the sort descriptions of the collection view and the visual markers.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CanSort">
            <summary>
            Determines whether the current column/row can be sorted.
            </summary>
            <returns>
              <c>true</c> if this instance can sort; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ToggleSort(System.Boolean)">
            <summary>
            Toggles the sort direction for the current column/row.
            </summary>
            <param name="append">Append the sort description if set to <c>true</c>.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.EnumerateItems(PropertyTools.Wpf.CellRange)">
            <summary>
            Enumerate the items in the specified cell range. This is used to update the SelectedItems property.
            </summary>
            <param name="range">The range.</param>
            <returns>
            The items enumeration.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.FindNextColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the next column that contains an empty cell.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="deltaColumn">The delta column.</param>
            <returns>
            The new column.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.FindNextRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the next row that contains an empty cell.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="deltaRow">The delta row.</param>
            <returns>
            The new row.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetColumnElement(System.Int32)">
            <summary>
            Gets the column element for the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The column element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetRowElement(System.Int32)">
            <summary>
            Gets the row element for the specified row.
            </summary>
            <param name="row">The row.</param>
            <returns>
            The row element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetColumnHeader(System.Int32)">
            <summary>
            Gets the column header for the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The column header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetColumnWidth(System.Int32)">
            <summary>
            Gets the column width for the specified column.
            </summary>
            <param name="i">The column index.</param>
            <returns>
            The column width.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetFormatString(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the format string for the specified cell.
            </summary>
            <param name="cell">The cell reference.</param>
            <returns>
            The format string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetRowHeader(System.Int32)">
            <summary>
            Gets the row header.
            </summary>
            <param name="j">The j.</param>
            <returns>
            The get row header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.GetRowHeight(System.Int32)">
            <summary>
            Gets the row height for the specified row.
            </summary>
            <param name="i">The row index.</param>
            <returns>
            The row height.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.InsertColumns">
            <summary>
            Inserts columns at the selected column.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.InsertRows">
            <summary>
            Inserts rows at the selection.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RefreshIfRequired">
            <summary>
            Refreshes the collection view and updates the grid content, if the ItemsSource is not implementing INotifyCollectionChanged.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes to the items collection.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowGridMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down events on the row grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowGridMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse up events on the row grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse move events on the row grid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowScrollViewerScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            Handles changes in the row scroll viewer.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowSplitterChangeCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handles the row splitter change completed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="dragCompletedEventArgs">The drag completed event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowSplitterChangeDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the row splitter change delta event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowSplitterChangeStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The row splitter change started.
            </summary>
            <param name="sender">The sender.</param>
            <param name="dragStartedEventArgs">The drag started event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.RowSplitterDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The row splitter double click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ScrollViewerScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            Handles scroll changes in the scroll viewers (both horizontal and vertical).
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SelectAll">
            <summary>
            Selects all cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SetCheckInSelectedCells(System.Boolean)">
            <summary>
            Sets the boolean value in the selected cells.
            </summary>
            <param name="value">The value.</param>
            <returns>
            True if cells were modified.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SheetGridMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down events on the grid sheet.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.TextEditorPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles key down events in the TextBox editor.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ConvertToCsv(System.String[0:,0:],System.String,System.Boolean)">
            <summary>
            Converts the specified array to a csv string.
            </summary>
            <param name="input">The input.</param>
            <param name="separator">The separator.</param>
            <param name="encode">Determines whether to encode the elements.</param>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ToggleCheck">
            <summary>
            Toggles the check in the current cell.
            </summary>
            <returns>
            True if the cell was modified.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.TopLeftMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down events on the top/left selection control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SetColumnWidth(System.Int32,System.Windows.GridLength)">
            <summary>
            Sets the width of the specified column.
            </summary>
            <param name="column">The column to change.</param>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.HandleAutoInsert(PropertyTools.Wpf.CellRef)">
            <summary>
            Handles automatic insert of items.
            </summary>
            <param name="cell">The cell.</param>
            <returns><c>true</c> if an item was inserted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.CurrentCellChanged">
            <summary>
            Handles change in current cell.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SelectedCellsChanged">
            <summary>
            Handles change in selected cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateSelectionVisibility">
            <summary>
            Updates the selection visibility.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.SelectionCellChanged">
            <summary>
            Handles change in selection cell.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ClearContent">
            <summary>
            Clears the content of the control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateCells(System.Int32,System.Int32)">
            <summary>
            Updates the cells of the grid.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateGridSize">
            <summary>
            Updates the column widths and row heights.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateSortDescriptionMarkers">
            <summary>
            Updates the sort description markers.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateColumns(System.Int32)">
            <summary>
            Updates the specified columns.
            </summary>
            <param name="columns">The column index.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.ItemsSourceChanged">
            <summary>
            Handles changes in the <see cref="P:PropertyTools.Wpf.DataGrid.ItemsSource" /> property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateGridContent">
            <summary>
            Updates all the UIElements of the grid (both cells, headers, row and column lines).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.UpdateRows(System.Int32)">
            <summary>
            Updates the rows.
            </summary>
            <param name="rows">The number rows.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AddInserterRow(System.Int32)">
            <summary>
            Adds an "insert" row.
            </summary>
            <param name="rows">The number of rows.</param>
            <remarks>This row is below/to the right of the data rows/columns.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.HandleIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the <see cref="P:IsEnabled" /> property.
            </summary>
            <param name="dependencyPropertyChangedEventArgs">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AutoSizeAllColumns">
            <summary>
            Resizes all columns automatically.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AutoSizeAllRows">
            <summary>
            Resizes all rows automatically.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AutoSizeColumn(System.Int32)">
            <summary>
            Auto-sizes the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns>The calculated width of the column.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.AutoSizeRow(System.Int32)">
            <summary>
            Auto-sizes the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Copy">
            <summary>
            Copies the selected cells to the clipboard, tab-separated.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGrid.Cut">
            <summary>
            Cuts the selected items.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DataGridControlFactory">
            <summary>
            Creates display and edit controls for the DataGrid.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateDisplayControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the display control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateEditControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the edit control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateDisplayControlOverride(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the display control.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>The display control.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateEditControlOverride(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the edit control.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateContainer(PropertyTools.Wpf.CellDefinition,System.Windows.FrameworkElement)">
            <summary>
            Creates a container with background binding.
            </summary>
            <param name="d">The cell definition.</param>
            <param name="c">The control to add to the container.</param>
            <returns>The container element.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateBinding(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates a binding.
            </summary>
            <param name="d">The cd.</param>
            <returns>
            A binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateOneWayBinding(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates the one way binding.
            </summary>
            <param name="cd">The cell definition.</param>
            <returns>
            A binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateCheckBoxControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates a check box control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A CheckBox.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateColorPickerControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates a color picker control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A color picker.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateColorPreviewControl(PropertyTools.Wpf.ColorCellDefinition)">
            <summary>
            Creates a color preview control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A preview control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateComboBox(PropertyTools.Wpf.SelectorCellDefinition)">
            <summary>
            Creates a combo box with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A ComboBox.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateTextBlockControl(PropertyTools.Wpf.CellDefinition)">
            <summary>
            Creates a text block control with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A TextBlock.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateTextBlockControl(PropertyTools.Wpf.SelectorCellDefinition)">
            <summary>
            Creates a text block control for a selector cell.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A TextBlock.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateTextBox(PropertyTools.Wpf.TextCellDefinition)">
            <summary>
            Creates a text box with data binding.
            </summary>
            <param name="d">The cell definition.</param>
            <returns>
            A TextBox.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.CreateTemplateControl(PropertyTools.Wpf.TemplateCellDefinition,System.Windows.DataTemplate)">
            <summary>
            Creates the template control.
            </summary>
            <param name="d">The definition.</param>
            <param name="template">The data template.</param>
            <returns>A content control.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.SetIsEnabledBinding(PropertyTools.Wpf.CellDefinition,System.Windows.FrameworkElement)">
            <summary>
            Sets the IsEnabled binding.
            </summary>
            <param name="cd">The cell definition.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.SetBackgroundBinding(PropertyTools.Wpf.CellDefinition,System.Windows.Controls.Control)">
            <summary>
            Sets the background binding.
            </summary>
            <param name="d">The cell definition.</param>
            <param name="c">The control.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.SetBackgroundBinding(PropertyTools.Wpf.CellDefinition,System.Windows.Controls.Border)">
            <summary>
            Sets the background binding.
            </summary>
            <param name="d">The cell definition.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DataGridControlFactory.FocusParentDataGrid(System.Windows.DependencyObject)">
            <summary>
            Focuses on the parent data grid.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject" />.</param>
        </member>
        <member name="T:PropertyTools.Wpf.AboutViewModel">
            <summary>
            Represents a viewmodel for the about dialog.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutViewModel.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AboutViewModel" /> class.
            </summary>
            <param name="a">An assembly.</param>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.AssemblyVersion">
            <summary>
            Gets AssemblyVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.BuildTime">
            <summary>
            Gets BuildTime.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.CLRversion">
            <summary>
            Gets CLRversion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Comments">
            <summary>
            Gets Comments.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Company">
            <summary>
            Gets Company.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.CopyReportText">
            <summary>
            Gets or sets the copy report text.
            </summary>
            <value>The copy report text.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Copyright">
            <summary>
            Gets Copyright.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Domain">
            <summary>
            Gets Domain.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileInfo">
            <summary>
            Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileName">
            <summary>
            Gets FileName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileVersion">
            <summary>
            Gets FileVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileVersionInfo">
            <summary>
            Gets or sets the file version info.
            </summary>
            <value>The file version info.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Image">
            <summary>
            Gets or sets Image.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.MachineName">
            <summary>
            Gets MachineName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.OSVersion">
            <summary>
            Gets OSVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Platform">
            <summary>
            Gets Platform.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Processors">
            <summary>
            Gets Processors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.ProductName">
            <summary>
            Gets ProductName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.ServicePack">
            <summary>
            Gets ServicePack.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.SystemInfoText">
            <summary>
            Gets or sets the system info text.
            </summary>
            <value>The system info text.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.UpdateStatus">
            <summary>
            Gets or sets UpdateStatus.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.User">
            <summary>
            Gets User.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Version">
            <summary>
            Gets Version.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutViewModel.GetReport">
            <summary>
            Gets the report.
            </summary>
            <returns>
            The get report.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ReflectionExtensions">
            <summary>
            Provides reflection extensions.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.FilterOnBrowsableAttribute``1(``0)">
            <summary>
            Filters on the <see cref="T:System.ComponentModel.BrowsableAttribute" /> and <see cref="T:PropertyTools.DataAnnotations.BrowsableAttribute" />.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="arr">The array.</param>
            <returns>
            The filtered values.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Gets the attributes of the specified type.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <param name="fieldInfo">The field info.</param>
            <param name="inherit">The inherit flag.</param>
            <returns>
            The attributes enumeration.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetFirstAttributeOrDefault``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return the first attribute of a given type for the specified property descriptor.
            </summary>
            <typeparam name="T">An attribute type.</typeparam>
            <param name="descriptor">The property descriptor.</param>
            <returns>The first attribute of the specified type.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetAttributeValue``2(System.ComponentModel.PropertyDescriptor,System.Func{``0,``1},``1)">
            <summary>
            Gets the value of the first attribute of the specified type.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="descriptor">The descriptor.</param>
            <param name="func">The mapping function.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value returned from the mapping function, or the default value if the attribute was not found.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetFirstAttributeOrDefault(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the first attribute of the specified type.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="attributeType">Type of the attribute.</param>
            <returns>The first attribute of the specified type.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.IsReadOnly(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Determines whether the property is read-only.
            </summary>
            <param name="pd">The property descriptor.</param>
            <returns><c>true</c> if the property is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetCategory(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the category for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetDescription(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the description for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <returns>The description.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetDisplayName(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the display name for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <returns>The display name.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.ObjectToDoubleConverter">
            <summary>
            Converts <see cref="T:System.Object" /> instances to <see cref="T:System.Double" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ObjectToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ObjectToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ValueToBooleanConverter">
            <summary>
            Converts <see cref="T:System.Object" /> instances to <see cref="T:System.Boolean" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToBooleanConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ValueToBooleanConverter"/> class.
            </summary>
            <param name="equalValue">The value returned when the specified value equals the parameter.</param>
        </member>
        <member name="P:PropertyTools.Wpf.ValueToBooleanConverter.EqualValue">
            <summary>
            Gets a value indicating whether the value returned when the specified value equals the parameter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.AboutDialog">
            <summary>
            Represents an about dialog.
            </summary>
            <summary>
            AboutDialog
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AboutDialog.vm">
            <summary>
            The vm.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.#ctor(System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AboutDialog" /> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.Image">
            <summary>
            Sets the image used in the about dialog.
            Example:
            d.Image = new BitmapImage(new Uri(@"pack://application:,,,/AssemblyName;component/Images/about.png"));
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.UpdateStatus">
            <summary>
            Sets the update status.
            </summary>
            <value>The update status.</value>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.CopyClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The copy click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.OkClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The ok click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.SystemInfoClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The system info click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog">
            <summary>
            Represents a common dialog box (Win32::SHBrowseForFolder()) that allows a user to select a folder.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.browseInfo">
            <summary>
            The browse info.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog" /> class.
            Constructs a BrowseForFolderDialog with default BrowseInfoFlags set to BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseCallbackProc">
            <summary>
            The browse callback proc.
            </summary>
            <param name="hwnd">The hwnd.</param>
            <param name="uMsg">The u msg.</param>
            <param name="lParam">The l param.</param>
            <param name="lpData">The lp data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags">
            <summary>
            The browse info flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_None">
            <summary>
            No specified BIF_xxx flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNONLYFSDIRS">
            <summary>
            Only return file system directories. If the user selects folders that are not part of the file system, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_DONTGOBELOWDOMAIN">
            <summary>
            Do not include network folders below the domain level in the dialog box's tree view control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_STATUSTEXT">
            <summary>
            Include a status area in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNFSANCESTORS">
            <summary>
            Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_EDITBOX">
            <summary>
            Include an edit control in the browse dialog box that allows the user to type the name of an item.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_VALIDATE">
            <summary>
            If the user types an invalid name into the edit box, the browse dialog box will call the application's BrowseCallbackProc with the BFFM_VALIDATEFAILED message.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NEWDIALOGSTYLE">
            <summary>
            Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_USENEWUI">
            <summary>
            Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEURLS">
            <summary>
            The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_UAHINT">
            <summary>
            When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box in place of the edit box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NONEWFOLDERBUTTON">
            <summary>
            Do not include the New Folder button in the browse dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NOTRANSLATETARGETS">
            <summary>
            When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORCOMPUTER">
            <summary>
            Only return computers. If the user selects anything other than a computer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORPRINTER">
            <summary>
            Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEFILES">
            <summary>
            The browse dialog box will display files as well as folders.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_SHAREABLE">
            <summary>
            The browse dialog box can display shareable resources on remote systems.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser">
            <summary>
            The message from browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_INITIALIZED">
            <summary>
            The dialog box has finished initializing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_SELCHANGED">
            <summary>
            The selection has changed in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDA">
            <summary>
            (ANSI) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDW">
            <summary>
            (Unicode) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_IUNKNOWN">
            <summary>
            An IUnknown interface is available to the dialog box.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser">
            <summary>
            The message to browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.WM_USER">
            <summary>
            Win32 API macro - start of user defined window message range.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTA">
            <summary>
            (ANSI) Sets the status text. Set lpData to point to a <c>null</c>-terminated string with the desired text.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_ENABLEOK">
            <summary>
            Enables or disables the dialog box's OK button.  lParam - To enable, set to a nonzero value. To disable, set to zero.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONA">
            <summary>
            (ANSI) Specifies the path of a folder to select.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONW">
            <summary>
            (Unicode) Specifies the path of a folder to select.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTW">
            <summary>
            (Unicode) Sets the status text. Set lpData to point to a <c>null</c>-terminated string with the desired text.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETOKTEXT">
            <summary>
            Sets the text that is displayed on the dialog box's OK button.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETEXPANDED">
            <summary>
            Specifies the path of a folder to expand in the Browse dialog box.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfo">
            <summary>
            Provides direct access to the Win32::SHBrowseForFolder() BROWSEINFO structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowserDialogFlags">
            <summary>
            Provides direct access to the ulFlags field of the Win32::SHBrowseForFolder() structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialExpandedFolder">
            <summary>
            Gets or sets the initially selected and expanded folder path.  Overrides SelectedFolder.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialFolder">
            <summary>
            Gets or sets the initially selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.OKButtonText">
            <summary>
            Gets or sets the text for the dialog's OK button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SelectedFolder">
            <summary>
            Gets the current and or final selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.Title">
            <summary>
            Gets or sets the string that is displayed above the tree view control in the dialog box (must set BEFORE calling ShowDialog()).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">The h wnd.</param>
            <param name="Msg">The msg.</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser,System.IntPtr,System.String)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">The h wnd.</param>
            <param name="msg">The msg.</param>
            <param name="wParam">The w param.</param>
            <param name="str">The str.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()).
            </summary>
            <returns>
            True if OK was pressed.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog(System.Windows.Window)">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()) with its hwndOwner set to the handle of 'owner'.
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            True if OK was pressed.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHBrowseForFolderW(PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW)">
            <summary>
            The sh browse for folder w.
            </summary>
            <param name="bi">The bi.</param>
            <returns>
            The <see cref="T:System.IntPtr" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            The sh get path from id list.
            </summary>
            <param name="pidl">The pidl.</param>
            <param name="path">The path.</param>
            <returns>
            The sh get path from id list.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseEventHandler(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser,System.IntPtr,System.IntPtr)">
            <summary>
            The browse event handler.
            </summary>
            <param name="hwnd">The hwnd.</param>
            <param name="uMsg">The u msg.</param>
            <param name="lParam">The l param.</param>
            <param name="lpData">The lp data.</param>
            <returns>
            The browse event handler.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.PInvokeSHBrowseForFolder(System.Windows.Window)">
            <summary>
            The p invoke sh browse for folder.
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            True if OK was pressed.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW">
            <summary>
            The browseinfow.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.hwndOwner">
            <summary>
            A handle to the owner window for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pidlRoot">
            <summary>
            A pointer to an item identifier list (PIDL) specifying the location of the root folder from which to start browsing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pszDisplayName">
            <summary>
            The address of a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH characters.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpszTitle">
            <summary>
            The address of a <c>null</c>-terminated string that is displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.ulFlags">
            <summary>
            Flags specifying the options for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpfn">
            <summary>
            A BrowseCallbackProc delegate that the dialog box calls when an event occurs.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lParam">
            <summary>
            An application-defined value that the dialog box passes to the BrowseCallbackProc delegate, if one is specified.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.iImage">
            <summary>
            A variable to receive the image associated with the selected folder. The image is specified as an index to the system image list.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorHelper">
            <summary>
            Static <see cref="T:System.Windows.Media.Color" /> helper methods.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorHelper" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorHelper.Automatic">
            <summary>
            Gets the automatic color.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorHelper.UndefinedColor">
            <summary>
            Gets the undefined color.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Change the alpha value of a color.
            </summary>
            <param name="c">The source color.</param>
            <param name="alpha">The new alpha value.</param>
            <returns>
            The new color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.CmykToColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK values to a <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="c">The cyan value.</param>
            <param name="m">The magenta value.</param>
            <param name="y">The yellow value.</param>
            <param name="k">The black value.</param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculates the difference between two <see cref="T:System.Windows.Media.Color" />s.
            </summary>
            <param name="c1">The first color.</param>
            <param name="c2">The second color.</param>
            <returns>
            L2-norm in RGBA space.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToCmyk(System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts RGB values to CMYK.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <returns>
            The CMYK values.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHex(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color" /> to a hexadecimal string.
            </summary>
            <param name="color">The source color.</param>
            <returns>
            The color to hex.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsv(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color" /> to HSV values (double)
            </summary>
            <param name="color">The source color.</param>
            <returns>
            Array of [Hue,Saturation,Value] in the range [0,1]
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsvBytes(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color" /> to HSV values (byte)
            </summary>
            <param name="color">The source color.</param>
            <returns>
            Array of [Hue,Saturation,Value] in the range [0,255]
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color" /> to unsigned int
            </summary>
            <param name="c">The source color.</param>
            <returns>
            The color to uint.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Complementary(System.Windows.Media.Color)">
            <summary>
            Calculates the complementary color.
            </summary>
            <param name="c">The source color.</param>
            <returns>
            The complementary color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.GetSpectrumColors(System.Int32)">
            <summary>
            Gets the hue spectrum colors.
            </summary>
            <param name="colorCount">The number of colors.</param>
            <returns>
            The spectrum.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HexToColor(System.String)">
            <summary>
            Convert a hexadecimal string to <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="value">The hex input string.</param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts from HSV to a RGB <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="hue">The hue.</param>
            <param name="saturation">The saturation.</param>
            <param name="value">The value.</param>
            <param name="alpha">The alpha.</param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Convert from HSV to <see cref="T:System.Windows.Media.Color" />.
            http://en.wikipedia.org/wiki/HSL_color_space
            </summary>
            <param name="hue">The Hue value [0,1].</param>
            <param name="sat">The saturation value [0,1].</param>
            <param name="val">The brightness value [0,1].</param>
            <param name="alpha">The alpha value [0.1].</param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HueDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculate the difference in hue between two <see cref="T:System.Windows.Media.Color" />s.
            </summary>
            <param name="c1">The first color.</param>
            <param name="c2">The second color.</param>
            <returns>
            The hue difference.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Interpolate(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:System.Windows.Media.Color" />s.
            </summary>
            <param name="c0">The first color.</param>
            <param name="c1">The second color.</param>
            <param name="x">The interpolation factor.</param>
            <returns>
            The interpolated color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.UIntToColor(System.UInt32)">
            <summary>
            Convert an unsigned int (32bit) to <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="color">The unsigned integer.</param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.RadioButtonList">
            <summary>
            Represents a control that shows a list of radio buttons.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.DescriptionConverterProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.DescriptionConverter"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.EnumTypeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.EnumType"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ItemMarginProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.ItemMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ItemPaddingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.ItemPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.OrientationProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ValueProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.RadioButtonList.Value"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.PartPanel">
            <summary>
            The part panel.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.panel">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.RadioButtonList" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.RadioButtonList" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.DescriptionConverter">
            <summary>
            Gets or sets the description converter.
            </summary>
            <value>The description converter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.EnumType">
            <summary>
            Gets or sets the type of the enumeration.
            </summary>
            <value>The type of the enumeration.</value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.ItemMargin">
            <summary>
            Gets or sets the item margin.
            </summary>
            <value>The item margin.</value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.ItemPadding">
            <summary>
            Gets or sets the item padding.
            </summary>
            <value>The item padding.</value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.ValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:PropertyTools.Wpf.RadioButtonList.Value" /> has changed or the <see cref="P:PropertyTools.Wpf.RadioButtonList.EnumType" /> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.HandleDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles data context changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.UpdateContent">
            <summary>
            Updates the content.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.BrushToColorConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Brush" /> instances to <see cref="T:System.Windows.Media.Color" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToBrushConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color" /> instances to <see cref="T:System.Windows.Media.Brush" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToHexConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color" /> instances to hex <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumToBooleanConverter">
            <summary>
            Enum to Boolean converter
            Usage 'Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static value...}'
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EnumToBooleanConverter.EnumType">
            <summary>
            Gets or sets the type of the enum.
            </summary>
            <value>The type of the enum.</value>
        </member>
        <member name="M:PropertyTools.Wpf.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumValuesConverter">
            <summary>
            Converts an Enum to a list of the enum type values
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumValuesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.SelfProvider">
            <summary>
            The self provider.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SelfProvider.ProvideValue(System.IServiceProvider)">
            <summary>
            The provide value.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>
            The provide value.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.WizardDialog">
            <summary>
            Represents a wizard dialog.
            </summary>
            <summary>
            WizardDialog
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WizardDialog.CurrentPageProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.WizardDialog.CurrentPage"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WizardDialog.PagesProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.WizardDialog.Pages"/> dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.WizardDialog" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.WizardDialog.CurrentPage">
            <summary>
            Gets or sets CurrentPage.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.WizardDialog.Pages">
            <summary>
            Gets or sets Pages.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.CurrentPage_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The current page_ changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.BackButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The back button_ click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.BindPage">
            <summary>
            The bind page.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.CancelButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cancel button_ click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.FinishButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The finish button_ click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.NextButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The next button_ click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.WizardDialog_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The wizard dialog_ loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PasswordHelper">
            <summary>
            The password helper.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.AttachProperty">
            <summary>
            Identifies the <see cref="M:PropertyTools.Wpf.PasswordHelper.Attach(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.PasswordProperty">
            <summary>
            Identifies the Password attached dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.IsUpdatingProperty">
            <summary>
            Identifies the IsUpdating attached dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetAttach(System.Windows.DependencyObject)">
            <summary>
            Gets the attach state.
            </summary>
            <param name="dp">The dp.</param>
            <returns>
            <c>true</c> if the control is attached.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetPassword(System.Windows.DependencyObject)">
            <summary>
            Gets the password.
            </summary>
            <param name="dp">The dp.</param>
            <returns>The password.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetAttach(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches the behaviour.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetPassword(System.Windows.DependencyObject,System.String)">
            <summary>
            The set password.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.Attach(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Attaches the password changed event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetIsUpdating(System.Windows.DependencyObject)">
            <summary>
            The get is updating.
            </summary>
            <param name="dp">The dp.</param>
            <returns>
            The get is updating.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.OnPasswordPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on password property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.PasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The password changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetIsUpdating(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is updating.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanFormatter">
            <summary>
            Formats the TimeSpan to a string.
            </summary>
            <remarks>See http://www.java2s.com/Open-Source/CSharp/Sound-Mp3/stamp/Microsoft/Office/PowerPoint/STAMP/Core/TimeSpanFormatter.cs.htm</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanFormatter.formatParser">
            <summary>
            The format parser.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TimeSpanFormatter" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified timespan to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current instance.</param>
            <returns>
            The string representation of the value of <paramref name="arg" /> , formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" /> .
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>
            An instance of the object specified by <paramref name="formatType" /> , if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.EvaluateMatch(System.Text.RegularExpressions.Match,System.TimeSpan)">
            <summary>
            Evaluates a match.
            </summary>
            <param name="match">The match.</param>
            <param name="timeSpan">The time span.</param>
            <returns>
            The evaluate match.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.GetMatchEvaluator(System.TimeSpan)">
            <summary>
            Gets the match evaluator for the specified time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>
            The match evaluator.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanParser">
            <summary>
            Parses a string to a TimeSpan.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanParser.ParserExpression">
            <summary>
            The parser expression.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanParser.Parse(System.String,System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="formatString">The format string.</param>
            <returns>
            A TimeSpan.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TypeHelper">
            <summary>
            The type helper.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TypeHelper.GenericEnumerableType">
            <summary>
            The generic sequence type.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.FindBiggestCommonType(System.Collections.IEnumerable)">
            <summary>
            Finds the biggest common type of items in the list.
            </summary>
            <param name="items">The list.</param>
            <returns>
            The biggest common type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetEnumType(System.Type)">
            <summary>
            Gets the underlying enum type of the specified type, if the specified type is a nullable type.
            </summary>
            <param name="propertyType">The type.</param>
            <returns>
            The type of the underlying enum.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetItemType(System.Collections.IEnumerable)">
            <summary>
            Gets the type of the items in the specified enumeration.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            The type of the items.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetListElementType(System.Type)">
            <summary>
            Gets the item type from a list type.
            </summary>
            <param name="listType">The list type.</param>
            <returns>
            The <see cref="T:System.Type" /> of the elements.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.Is(System.Type,System.Type)">
            <summary>
            Determines whether the first type is assignable from the specified second type.
            </summary>
            <param name="firstType">Type of the first type.</param>
            <param name="secondType">The type of the second type.</param>
            <returns>
            True if it is assignable.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetInnerMostGenericType(System.Collections.IList)">
            <summary>
            Gets inner generic type of an IList&gt;IList&lt;
            </summary>
            <param name="list">The list.</param>
            <returns>
            The <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetInnerTypeOfList(System.Collections.IList)">
            <summary>
            Gets the type of the inner list of a IList&gt;IList&lt;
            </summary>
            <param name="list">The list.</param>
            <returns>
            The type of the inner list. Return <c>null</c> if only interface type can be retrieved.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.IsIListIList(System.Type)">
            <summary>
            Determines whether the type is IList{IList}.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the type is IList{IList}; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DelegateCommand">
            <summary>
            Represents a delegate command.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommand.canExecute">
            <summary>
            The can execute.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommand.execute">
            <summary>
            The execute.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommand" /> class.
            </summary>
            <param name="execute">The execute.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="E:PropertyTools.Wpf.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <c>null</c>.</param>
            <returns>
            <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to <c>null</c>.</param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the can execute changed.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyDialog">
            <summary>
            Represents a property editing dialog.
            </summary>
            <summary>
            PropertyDialog
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyDialog" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDialog.CanApply">
            <summary>
            Gets or sets a value indicating whether the apply button is visible.
            </summary>
            <value><c>true</c> if this instance can apply; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDialog.PropertyControl">
            <summary>
            Gets the property control.
            </summary>
            <value>The property control.</value>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.GetFieldValues(System.Object)">
            <summary>
            This stores the current "copy" of the object.
            If it is non-<c>null</c>, then we are in the middle of an
            editable operation.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            Clone of current object
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.RestoreFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This restores the state of the current object from the passed clone object.
            </summary>
            <param name="fieldValues">Object to restore state from</param>
            <param name="obj"></param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.MemberwiseClone(System.Object)">
            <summary>
            Clones the object memberwise.
            </summary>
            <param name="src">The SRC.</param>
            <returns>
            The memberwise clone.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.ApplyButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The apply button click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.BeginEdit">
            <summary>
            Begins the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cancel button click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CancelEdit">
            <summary>
            Cancels the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CloseButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The close button click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CommitChanges">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.EndEdit">
            <summary>
            Ends the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.HelpButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The help button click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.OkButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The ok button click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.PropertyDialogDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The property dialog data context changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBag">
            <summary>
            Represents a bag of items.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBag" /> class.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="E:PropertyTools.Wpf.ItemsBag.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.BiggestType">
            <summary>
            Gets the biggest common type of the objects.
            </summary>
            <value>The type of the biggest.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.Objects">
            <summary>
            Gets the objects in the bag.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.SuspendNotifications">
            <summary>
            Gets or sets a value indicating whether to suspend property changed notifications.
            </summary>
            <value><c>true</c> if notifications are suspended; otherwise, <c>false</c> .</value>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.RelayPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The relay property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Subscribe">
            <summary>
            Adds subscriptions to property changed notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Unsubscribe">
            <summary>
            Removes the subscriptions to property changed notifications.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagPropertyDescriptor">
            <summary>
            Provides a property descriptor for an object in the <see cref="T:PropertyTools.Wpf.ItemsBag" />.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagPropertyDescriptor.componentType">
            <summary>
            The component type.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagPropertyDescriptor.defaultDescriptor">
            <summary>
            The default descriptor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagPropertyDescriptor" /> class.
            </summary>
            <param name="defaultDescriptor">The default descriptor.</param>
            <param name="componentType">Type of the component.</param>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see
            cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see
            cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.GetNullableType(System.Type)">
            <summary>
            Gets the type of the <see cref="T:System.Nullable" />.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:System.Type" />.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider">
            <summary>
            Provides a type description provider for the <see cref="T:PropertyTools.Wpf.ItemsBag" />.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.DefaultTypeProvider">
            <summary>
            The default type provider.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be <c>null</c> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" /> .</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagTypeDescriptor">
            <summary>
            Provides a custom type descriptor for the <see cref="T:PropertyTools.Wpf.ItemsBag" />.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagTypeDescriptor.bag">
            <summary>
            The bag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagTypeDescriptor" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptor.GetProperties">
            <summary>
            Get the properties of the items bag.
            </summary>
            <returns>
            The property descriptor collection.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryControlType">
            <summary>
            Specifies the control type for categories.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.GroupBox">
            <summary>
            Group boxes.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.Expander">
            <summary>
            Expander controls.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.Template">
            <summary>
            Content control. Remember to set the CategoryControlTemplate.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyGridControlFactory">
            <summary>
            Provides a control factory for the <see cref="T:PropertyTools.Wpf.PropertyGrid" /> control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGridControlFactory.FontFamilyConverter">
            <summary>
            The font family converter
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGridControlFactory.cachedFontFamilies">
            <summary>
            The cached font families.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyGridControlFactory" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridControlFactory.Converters">
            <summary>
            Gets or sets the list of converters.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridControlFactory.Editors">
            <summary>
            Gets or sets the list of type editors.
            </summary>
            <value>The editors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridControlFactory.FileDialogService">
            <summary>
            Gets or sets the file dialog service.
            </summary>
            <value>The file dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridControlFactory.FolderBrowserDialogService">
            <summary>
            Gets or sets the folder browser dialog service.
            </summary>
            <value>The folder browser dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridControlFactory.UseDatePicker">
            <summary>
            Gets or sets a value indicating whether to use the DatePicker control for DateTime values.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the control for a property.
            </summary>
            <param name="property">The property item.</param>
            <param name="options">The options.</param>
            <returns>
            A element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.ConvertHorizontalAlignment(PropertyTools.DataAnnotations.HorizontalAlignment)">
            <summary>
            Converts the horizontal alignment.
            </summary>
            <param name="a">The alignment to convert.</param>
            <returns>
            A <see cref="T:System.Windows.HorizontalAlignment" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateBoolControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the checkbox control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateEditorControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.TypeEditor)">
            <summary>
            Creates a control based on a template from a a <see cref="T:PropertyTools.Wpf.TypeEditor" />.
            </summary>
            <param name="property">The property.</param>
            <param name="editor">The editor.</param>
            <returns>
            A <see cref="T:System.Windows.Controls.ContentControl" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateBrushControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the brush control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateColorControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the color control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateComboBoxControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the combo box control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateCommentControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates a comment control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateContentControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates a content control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            A <see cref="T:System.Windows.Controls.ContentControl" />.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateDateTimeControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the date time control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateDefaultControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the default control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateDictionaryControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates a dictionary control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateDirectoryPathControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the directory path control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.GetEnumValues(System.Type)">
            <summary>
            Gets the values for the specified enumeration type.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <returns>A sequence of values.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateEnumControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the select control.
            </summary>
            <param name="property">The property.</param>
            <param name="options">The options.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateFilePathControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the file path control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateFontFamilyControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the font family control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateFontPreview(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the font preview.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateGridControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the grid control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateHtmlControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the HTML control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateImageControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the image control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateLinkControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the link control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreatePasswordControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the password control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateSecurePasswordControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the secure password control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateSliderControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the slider control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateSpinControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the spin control.
            </summary>
            <param name="property">The property.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.CreateCheckableItems(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates a sequence of checkboxes.
            </summary>
            <param name="property">The property.</param>
            <returns>
            A FrameworkElement.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.UpdateConverter(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Updates the converter from the Converters collection.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is a reference type or a <see cref="T:System.Nullable" />.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the specified type can be set to <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridControlFactory.GetFontFamilies">
            <summary>
            Gets the font families.
            </summary>
            <returns>
            List of font families.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyGridOperator">
            <summary>
            Creates a model for the <see cref="T:PropertyTools.Wpf.PropertyGrid" /> control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyGridOperator" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.DefaultCategoryName">
            <summary>
            Gets or sets the default name of the category.
            </summary>
            <value>The default name of the category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.DefaultTabName">
            <summary>
            Gets or sets the default name of the tab.
            </summary>
            <value>The default name of the tab.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.EnabledPattern">
            <summary>
            Gets or sets the enabled pattern.
            </summary>
            <value>The enabled pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.InheritCategories">
            <summary>
            Gets or sets a value indicating whether each property should inherit the category attribute from the property declared before.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.ModifyCamelCaseDisplayNames">
            <summary>
            Gets or sets a value indicating whether to add spaces at the camel bumps of the display names.
            </summary>
            <value><c>true</c> if display names should be modified; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.OptionalPattern">
            <summary>
            Gets or sets the optional pattern.
            </summary>
            <value>The optional pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.VisiblePattern">
            <summary>
            Gets or sets the visible pattern.
            </summary>
            <value>The visible pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.CurrentCategory">
            <summary>
            Gets or sets the current category.
            </summary>
            <value>The current category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.CurrentCategoryDeclaringType">
            <summary>
            Gets or sets the declaring type of the current category.
            </summary>
            <value>The type of the current category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGridOperator.CurrentDeclaringType">
            <summary>
            Gets or sets the type of the current component.
            </summary>
            <value>The type of the current component.</value>
            <remarks>This is used to avoid that Category attributes are inherited from superclass to subclass.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.CreateModel(System.Object,System.Boolean,PropertyTools.Wpf.IPropertyGridOptions)">
            <summary>
            Creates the property model.
            </summary>
            <param name="instance">The instance.</param>
            <param name="isEnumerable">if set to <c>true</c> [is enumerable].</param>
            <param name="options">The options.</param>
            <returns>
            A list of <see cref="T:PropertyTools.Wpf.Tab" /> .
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.CreatePropertyItem(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            Creates a property item.
            </summary>
            <param name="pd">The property descriptor.</param>
            <param name="propertyDescriptors">The property descriptors.</param>
            <param name="instance">The instance.</param>
            <returns>
            A property item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.Reset">
            <summary>
            Resets this factory.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.CreatePropertyItems(System.Object,PropertyTools.Wpf.IPropertyGridOptions)">
            <summary>
            Creates property items for all properties in the specified object.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="options">The options.</param>
            <returns>
            Enumeration of PropertyItem.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.CreateCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Creates the property item instance.
            </summary>
            <param name="pd">The property descriptor.</param>
            <param name="propertyDescriptors">The collection of property descriptors.</param>
            <returns>
            A property item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.GetCategory(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the category for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <param name="declaringType">The declaring type.</param>
            <returns>
            A category string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.GetDescription(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the description for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <param name="declaringType">The declaring type.</param>
            <returns>
            A description string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.GetDisplayName(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the display name for the specified property.
            </summary>
            <param name="pd">The property descriptor.</param>
            <param name="declaringType">The declaring type.</param>
            <returns>
            A display name string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.GetLocalizedDescription(System.String,System.Type)">
            <summary>
            Gets the localized description.
            </summary>
            <param name="key">The key.</param>
            <param name="declaringType">Type of the declaring.</param>
            <returns>
            The localized description.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.GetLocalizedString(System.String,System.Type)">
            <summary>
            Gets the localized string.
            </summary>
            <param name="key">The key.</param>
            <param name="declaringType">The declaring type.</param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.SetProperties(PropertyTools.Wpf.PropertyItem,System.Object)">
            <summary>
            Sets the properties.
            </summary>
            <param name="pi">The property item.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGridOperator.SetAttribute(System.Attribute,PropertyTools.Wpf.PropertyItem,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="pi">The pi.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:PropertyTools.Wpf.Group">
            <summary>
            Represents a group in a <see cref="T:PropertyTools.Wpf.PropertyGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Group" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Properties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Group.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyGridControlFactory">
            <summary>
            Defines functionality to create controls for a <see cref="T:PropertyTools.Wpf.PropertyGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyGridControlFactory.CreateControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the control for a property.
            </summary>
            <param name="propertyItem">The property item.</param>
            <param name="options">The options.</param>
            <returns>
            A element.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyGridOptions">
            <summary>
            Specifies options for the PropertyGrid
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.IPropertyGridOptions.RequiredAttribute">
            <summary>
            Gets the required (opt-in) attribute.
            </summary>
            <value>The required attribute.</value>
        </member>
        <member name="P:PropertyTools.Wpf.IPropertyGridOptions.ShowDeclaredOnly">
            <summary>
            Gets a value indicating whether to show declared properties only.
            </summary>
            <value><c>true</c> if only declared properties should be shown; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.IPropertyGridOptions.ShowReadOnlyProperties">
            <summary>
            Gets a value indicating whether to show read only properties.
            </summary>
            <value><c>true</c> if read only properties should be shown; otherwise, <c>false</c> .</value>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyGridOperator">
            <summary>
            Defines functionality to build the model for a <see cref="T:PropertyTools.Wpf.PropertyGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyGridOperator.CreateModel(System.Object,System.Boolean,PropertyTools.Wpf.IPropertyGridOptions)">
            <summary>
            Creates the model.
            </summary>
            <param name="instance">The instance.</param>
            <param name="isEnumerable">if set to <c>true</c> enumerable types instances will use the enumerated objects instead of the instance itself.</param>
            <param name="options">The options.</param>
            <returns>
            The tabs.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.LabelWidthSharing">
            <summary>
            Specifies how the label widths are shared.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.SharedInTab">
            <summary>
            The shared in tab.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.SharedInGroup">
            <summary>
            The shared in group.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.NotShared">
            <summary>
            The not shared.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CheckBoxLayout">
            <summary>
            Specifies the layout for checkboxes.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CheckBoxLayout.Header">
            <summary>
            Show the header, then the check box without content
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CheckBoxLayout.HideHeader">
            <summary>
            Hide the header, show the check box with the display name as content
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CheckBoxLayout.CollapseHeader">
            <summary>
            Collapse the header, show the check box with the display name as content
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TabVisibility">
            <summary>
            Specifies the visibility of the tab strip.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TabVisibility.Visible">
            <summary>
            The tabs are visible.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TabVisibility.VisibleIfMoreThanOne">
            <summary>
            The tabs are visible if there is more than one tab.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TabVisibility.Collapsed">
            <summary>
            The tab strip is collapsed. The contents of the tab pages will be stacked vertically in the control. 
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyGrid">
            <summary>
            The property control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.CategoryControlTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.CategoryControlTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.CategoryControlTypeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.CategoryControlType"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.CategoryHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.CategoryHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.DescriptionIconAlignmentProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.DescriptionIconAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.DescriptionIconProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.DescriptionIcon"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.EnableLabelWidthResizingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.EnableLabelWidthResizing"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.EnumAsRadioButtonsLimitProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.EnumAsRadioButtonsLimit"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.IndentationProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.Indentation"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.LabelWidthSharingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.LabelWidthSharing"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.MaximumLabelWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.MaximumLabelWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.MinimumLabelWidthProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.MinimumLabelWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.MoveFocusOnEnterProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.MoveFocusOnEnter"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ControlFactoryProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ControlFactory"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.OperatorProperty">
            <summary>
            Identifies the <see cref="T:PropertyTools.Wpf.PropertyItem"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.RequiredAttributeProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.RequiredAttribute"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.SelectedObjectProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.SelectedObject"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.SelectedObjectsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.SelectedObjects"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.SelectedTabIndexProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.SelectedTabIndex"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.SelectedTabIdProperty">
            <summary>
            The selected tab id property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.CheckBoxLayoutProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.CheckBoxLayout"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ShowDeclaredOnlyProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ShowDeclaredOnly"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ShowDescriptionIconsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ShowDescriptionIcons"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ShowReadOnlyPropertiesProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ShowReadOnlyProperties"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.TabHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.TabHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.TabPageHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.TabPageHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.TabStripPlacementProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.TabStripPlacement"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ToolTipTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ToolTipTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.TabVisibilityProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.TabVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ValidationErrorStyleProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ValidationErrorStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ValidationErrorTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ValidationErrorTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ValidationTemplateProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.PropertyGrid.ValidationTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.PartPanel">
            <summary>
            The panel part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.PartScrollViewer">
            <summary>
            The scroll control part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.PartTabs">
            <summary>
            The tab control part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ValueToVisibilityConverter">
            <summary>
            The value to visibility converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ValueToBooleanConverter">
            <summary>
            The value to boolean converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.AllMultiValueConverter">
            <summary>
            Converts a list of values to a boolean value. Returns <c>true</c> if all values equal the converter parameter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.NullToBoolConverter">
            <summary>
            The <c>null</c> to boolean converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.ZeroToVisibilityConverter">
            <summary>
            The zero to visibility converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.currentSelectedObjectType">
            <summary>
            The current selected object type.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.panelControl">
            <summary>
            The panel control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.scrollViewer">
            <summary>
            The scroll viewer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyGrid.tabControl">
            <summary>
            The tab control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.PropertyGrid" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.CategoryControlTemplate">
            <summary>
            Gets or sets the category control template.
            </summary>
            <value>The category control template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.CategoryControlType">
            <summary>
            Gets or sets the type of the category control.
            </summary>
            <value>The type of the category control.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.CategoryHeaderTemplate">
            <summary>
            Gets or sets the category header template.
            </summary>
            <value>The category header template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.CurrentObject">
            <summary>
            Gets or sets CurrentObject.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.DescriptionIcon">
            <summary>
            Gets or sets the description icon.
            </summary>
            <value>The description icon.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.DescriptionIconAlignment">
            <summary>
            Gets or sets the alignment for description icons.
            </summary>
            <value>The description icon alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.EnableLabelWidthResizing">
            <summary>
            Gets or sets a value indicating whether label column resizing is enabled.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.EnumAsRadioButtonsLimit">
            <summary>
            Gets or sets the maximum number of values to show for radio buttons lists.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.Indentation">
            <summary>
            Gets or sets the indentation.
            </summary>
            <value>
            The indentation.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.LabelWidthSharing">
            <summary>
            Gets or sets the type of label width sharing.
            </summary>
            <value>The label width sharing.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.MaximumLabelWidth">
            <summary>
            Gets or sets the maximum width of the label.
            </summary>
            <value>The maximum width of the label.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.MinimumLabelWidth">
            <summary>
            Gets or sets the minimum width of the property labels.
            </summary>
            <value>The minimum width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.MoveFocusOnEnter">
            <summary>
            Gets or sets a value indicating whether to move focus on unhandled Enter key down events.
            </summary>
            <value><c>true</c> if move focus on enter; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ControlFactory">
            <summary>
            Gets or sets the control factory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.SelectedObject">
            <summary>
            Gets or sets the selected object.
            </summary>
            <value>The selected object.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.SelectedObjects">
            <summary>
            Gets or sets the selected objects.
            </summary>
            <value>The selected objects.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.SelectedTabIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
            <value>The index of the selected tab.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.SelectedTabId">
            <summary>
            Gets or sets the selected tab id.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.CheckBoxLayout">
            <summary>
            Gets or sets the check box layout.
            </summary>
            <value>The check box layout.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ShowDescriptionIcons">
            <summary>
            Gets or sets a value indicating whether to show description icons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.TabHeaderTemplate">
            <summary>
            Gets or sets the tab header template.
            </summary>
            <value>The tab header template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.TabPageHeaderTemplate">
            <summary>
            Gets or sets the tab page header template.
            </summary>
            <value>The tab page header template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.TabStripPlacement">
            <summary>
            Gets or sets the tab strip placement.
            </summary>
            <value>The tab strip placement.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ToolTipTemplate">
            <summary>
            Gets or sets the tool tip template.
            </summary>
            <value>The tool tip template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.TabVisibility">
            <summary>
            Gets or sets a value indicating the tab visibility state.
            </summary>
            <value>The tab visibility state.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ValidationErrorStyle">
            <summary>
            Gets or sets the validation error style.
            </summary>
            <value>The validation error style.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ValidationErrorTemplate">
            <summary>
            Gets or sets the validation error template.
            </summary>
            <value>The validation error template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ValidationTemplate">
            <summary>
            Gets or sets the validation template.
            </summary>
            <value>The validation template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.RequiredAttribute">
            <summary>
            Gets or sets the required attribute type.
            </summary>
            <value>The required attribute type.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ShowDeclaredOnly">
            <summary>
            Gets or sets a value indicating whether to show declared properties only.
            </summary>
            <value><c>true</c> if only declared properties should be shown; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyGrid.ShowReadOnlyProperties">
            <summary>
            Gets or sets a value indicating whether to show read only properties].
            </summary>
            <value><c>true</c> if read only properties should be shown; otherwise, <c>false</c> .</value>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreateControls(System.Object,System.Collections.Generic.IEnumerable{PropertyTools.Wpf.Tab})">
            <summary>
            Creates the controls.
            </summary>
            <param name="instance">The instance.</param>
            <param name="tabs">The tabs.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreateControlsTabless(System.Object,System.Collections.Generic.IEnumerable{PropertyTools.Wpf.Tab})">
            <summary>
            Creates the controls (not using tab control).
            </summary>
            <param name="instance">The instance.</param>
            <param name="tabs">The tab collection.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreateToolTip(System.String)">
            <summary>
            Creates a tool tip.
            </summary>
            <param name="content">The content.</param>
            <returns>
            The tool tip.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled KeyDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.OnSelectedObjectChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the selected object is changed.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.AppearanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The appearance changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreatePropertyPanel(PropertyTools.Wpf.Group,System.Windows.Controls.Grid,System.Int32,System.Boolean)">
            <summary>
            Creates the content control and property panel.
            </summary>
            <param name="g">The g.</param>
            <param name="tabItems">The tab items.</param>
            <param name="index">The index.</param>
            <param name="fillTab">Stretch the panel if set to <c>true</c>.</param>
            <returns>
            The property panel.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.AddTabPageHeader(PropertyTools.Wpf.Tab,System.Windows.Controls.Grid)">
            <summary>
            Adds the tab page header if TabPageHeaderTemplate is specified.
            </summary>
            <param name="tab">The tab.</param>
            <param name="panel">The tab panel.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.AddPropertyPanel(System.Windows.Controls.Panel,PropertyTools.Wpf.PropertyItem,System.Object,PropertyTools.Wpf.Tab)">
            <summary>
            Creates and adds the property panel.
            </summary>
            <param name="panel">The panel where the property panel should be added.</param>
            <param name="pi">The property.</param>
            <param name="instance">The instance.</param>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreateLabel(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the label control.
            </summary>
            <param name="pi">The property item.</param>
            <returns>
            An element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.CreatePropertyControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the property control.
            </summary>
            <param name="pi">The property item.</param>
            <returns>
            An element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.SelectedObjectsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in SelectedObjects.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.OnSelectedObjectsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the selected objects collection is changed.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.SetCurrentObjectFromSelectedObjects(System.Collections.IEnumerable)">
            <summary>
            Set CurrentObject when SelectedObjects is changed.
            </summary>
            <param name="enumerable">SelectedObjects.</param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.UpdateControls">
            <summary>
            Updates the controls.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.SelectedTabChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the selected tab.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyGrid.SelectedTabIndexChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the selected tab index.
            </summary>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyControlFactoryOptions">
            <summary>
            Represents options for the property control factory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControlFactoryOptions.EnumAsRadioButtonsLimit">
            <summary>
            Gets or sets the limiting number of values for <c>enum</c> properties that can shown with radio buttons.
            </summary>
            <value>The limit. If the number of values exceeds the limit, a selector control will be used.</value>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyItem">
            <summary>
            Represents a property in a <see cref="T:PropertyTools.Wpf.PropertyGrid" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyItem" /> class.
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
            <param name="propertyDescriptors">The property descriptors.</param>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.InputDirection">
            <summary>
            Gets or sets the input direction (for DataGrid control).
            </summary>
            <value>The input direction.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEasyInsertByKeyboardEnabled">
            <summary>
            Gets or sets a value indicating whether 'easy insert' by keyboard is enabled in a DataGrid control.
            </summary>
            <value><c>true</c> if easy insert is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEasyInsertByMouseEnabled">
            <summary>
            Gets or sets a value indicating whether 'easy insert' by mouse is enabled in a DataGrid control.
            </summary>
            <value><c>true</c> if easy insert is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether to accept return.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ActualPropertyType">
            <summary>
            Gets the actual type of the property.
            </summary>
            <remarks>If a converter is defined, the target type will be set.</remarks>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.AutoUpdateText">
            <summary>
            Gets or sets a value indicating whether to auto update text.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IndentationLevel">
            <summary>
            Gets or sets the indentation level of the header.
            </summary>
            <value>
            The indentation level.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ConverterCulture">
            <summary>
            Gets or sets the converter culture.
            </summary>
            <value>The converter culture.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ConverterParameter">
            <summary>
            Gets or sets the converter parameter.
            </summary>
            <value>The converter parameter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DataTypes">
            <summary>
            Gets the data types.
            </summary>
            <value>The data types.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Description">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Descriptor">
            <summary>
            Gets or sets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this property is read only.
            </summary>
            <value><c>true</c> if this property is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilePathDefaultExtension">
            <summary>
            Gets or sets the file path default extension.
            </summary>
            <value>The file path default extension.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilePathFilter">
            <summary>
            Gets or sets the file path filter.
            </summary>
            <value>The file path filter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilterDescriptor">
            <summary>
            Gets or sets the filter descriptor.
            </summary>
            <value>The filter descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DefaultExtensionDescriptor">
            <summary>
            Gets or sets the default extension descriptor.
            </summary>
            <value>The default extension descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontFamilyPropertyDescriptor">
            <summary>
            Gets or sets the font family property descriptor.
            </summary>
            <value>The font family property descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontWeight">
            <summary>
            Gets or sets the open type weight.
            </summary>
            <value>The font weight.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.HeaderPlacement">
            <summary>
            Gets or sets the header placement.
            </summary>
            <value>The header placement.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FillTab">
            <summary>
            Gets or sets a value indicating whether to stretch to the available tab size.
            </summary>
            <value><c>true</c> if fill is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsComment">
            <summary>
            Gets or sets a value indicating whether the property is a comment.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsContent">
            <summary>
            Gets or sets a value indicating whether the property contains content that should be shown in a ContentControl.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsDirectoryPath">
            <summary>
            Gets or sets a value indicating whether the property is a directory path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEditable">
            <summary>
            Gets or sets a value indicating whether the property is editable.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEnabledDescriptor">
            <summary>
            Gets or sets the is enabled descriptor.
            </summary>
            <value>The is enabled descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEnabledValue">
            <summary>
            Gets or sets the value that enables the property.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFileOpenDialog">
            <summary>
            Gets or sets a value indicating whether the property is a file open dialog.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFilePath">
            <summary>
            Gets or sets a value indicating whether the property is a file path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFontFamilySelector">
            <summary>
            Gets or sets a value indicating whether this property is a font family selector.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsOptional">
            <summary>
            Gets or sets a value indicating whether this property is optional.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEnabledByRadioButton">
            <summary>
            Gets a value indicating whether this property is enabled by a radio button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsPassword">
            <summary>
            Gets or sets a value indicating whether the property is a password.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsSlidable">
            <summary>
            Gets or sets a value indicating whether this property should show a slider.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsSpinnable">
            <summary>
            Gets or sets a value indicating whether this property should show spin buttons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsVisibleDescriptor">
            <summary>
            Gets or sets the is visible descriptor.
            </summary>
            <value>The is visible descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsVisibleValue">
            <summary>
            Gets or sets the value that makes the property visible.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SelectedValuePath">
            <summary>
            Gets or sets the path that is used to get the SelectedValue from the SelectedItem of a Selector.
            </summary>
            <value>The path used to get the SelectedValue. The default is an empty string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DisplayMemberPath">
            <summary>
            Gets or sets the display member path.
            </summary>
            <value>
            The display member path.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ItemsSourceDescriptor">
            <summary>
            Gets or sets a descriptor that provides the ItemsSource.
            </summary>
            <value>The ItemsSource <see cref="T:System.ComponentModel.PropertyDescriptor" />.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListItemItemsSource">
            <summary>
            Gets or sets the items source for list items.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListCanAdd">
            <summary>
            Gets or sets a value indicating whether items can be added to the list.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListCanRemove">
            <summary>
            Gets or sets a value indicating whether items can be removed from the list.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListMaximumNumberOfItems">
            <summary>
            Gets or sets the list maximum number of items.
            </summary>
            <value>The list maximum number of items.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MaxLength">
            <summary>
            Gets or sets the max length.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MaximumHeight">
            <summary>
            Gets or sets the maximum height.
            </summary>
            <value>The maximum height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MinimumHeight">
            <summary>
            Gets or sets the minimum height.
            </summary>
            <value>The minimum height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MoveFocusOnEnter">
            <summary>
            Gets or sets a value indicating whether to move focus on enter.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.OptionalDescriptor">
            <summary>
            Gets or sets the optional descriptor.
            </summary>
            <value>The optional descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.RadioDescriptor">
            <summary>
            Gets or sets the descriptor for the property that enables/disables by a radio button.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.RadioValue">
            <summary>
            Gets or sets the value used by the radio button to enable/disable.
            </summary>
            <value>The value that enables.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.OptionalValue">
            <summary>
            Gets or sets the optional value.
            </summary>
            <value>The optional value.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.PreviewFonts">
            <summary>
            Gets or sets a value indicating whether to preview fonts.
            </summary>
            <value><c>true</c> if fonts should be previewed; otherwise, <c>false</c> .</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.PropertyIcon">
            <summary>
            Gets or sets the property icon.
            </summary>
            <value>The property icon.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.RelativePathDescriptor">
            <summary>
            Gets or sets the relative path descriptor.
            </summary>
            <value>The relative path descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ResetCommand">
            <summary>
            Gets or sets the reset command.
            </summary>
            <value>The reset command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ResetHeader">
            <summary>
            Gets or sets the reset header.
            </summary>
            <value>The reset header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderLargeChange">
            <summary>
            Gets or sets the slider large change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderMaximum">
            <summary>
            Gets or sets the slider maximum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderMinimum">
            <summary>
            Gets or sets the slider minimum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderSmallChange">
            <summary>
            Gets or sets the slider small change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderSnapToTicks">
            <summary>
            Gets or sets a value indicating whether the slider snaps to the ticks.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderTickFrequency">
            <summary>
            Gets or sets the slider tick frequency.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SortIndex">
            <summary>
            Gets or sets the index of the sort.
            </summary>
            <value>The index of the sort.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinLargeChange">
            <summary>
            Gets or sets the spin control large change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinMaximum">
            <summary>
            Gets or sets the spin control maximum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinMinimum">
            <summary>
            Gets or sets the spin control minimum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinSmallChange">
            <summary>
            Gets or sets the spin control small change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Tab">
            <summary>
            Gets or sets the tab.
            </summary>
            <value>The tab.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.TextWrapping">
            <summary>
            Gets or sets the text wrapping.
            </summary>
            <value>The text wrapping.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SelectorStyle">
            <summary>
            Gets or sets a value indicating whether the property should use radio buttons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.CheckableItemsContentPropertyName">
            <summary>
            Gets or sets the name of the Content property for a property of checkable items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.CheckableItemsIsCheckedPropertyName">
            <summary>
            Gets or sets the name of the IsChecked property for a property of checkable items.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.CreateBinding(System.Windows.Data.UpdateSourceTrigger,System.Boolean)">
            <summary>
            Creates a binding.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="applyConverter">Assign the converter if set to <c>true</c>.</param>
            <returns>
            The binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.CreateOneWayBinding">
            <summary>
            Creates a one way binding.
            </summary>
            <returns>
            The binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetAttribute``1">
            <summary>
            Gets the first attribute of the specified type.
            </summary>
            <typeparam name="T">Type of attribute.</typeparam>
            <returns>
            The attribute, or <c>null</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetAttributes``1">
            <summary>
            Gets the attributes of the specified type.
            </summary>
            <typeparam name="T">Type of attribute.</typeparam>
            <returns>
            Enumerable of T.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetDescriptor(System.String)">
            <summary>
            Gets the property descriptor for the specified property.
            </summary>
            <param name="name">The property name.</param>
            <returns>
            A property descriptor.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.Is(System.Type)">
            <summary>
            Determines whether the specified type is assignable from this property type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if ok; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetConverterTargetType">
            <summary>
            Gets the type of the converter target.
            </summary>
            <returns>
            The target type.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ValidationErrorsToStringConverter">
            <summary>
            Converts <see cref="T:System.Windows.Controls.ValidationError" /> lists to <see cref="T:System.String" /> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValidationErrorsToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValidationErrorsToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns <c>null</c>, the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.WebBrowserBehavior">
            <summary>
            Contains behaviors for the <see cref="T:System.Windows.Controls.WebBrowser" /> control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WebBrowserBehavior.NavigateToStringProperty">
            <summary>
            Identifies the NavigateToString dependency property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.GetNavigateToString(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the NavigateToString property.
            </summary>
            <param name="obj">The object.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.SetNavigateToString(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the NavigateToString property.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.NavigateToStringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The navigate to string changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBoxAutomationPeer">
            <summary>
            Exposes <see cref="T:TreeListBox"/> types to UI Automation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxAutomationPeer.#ctor(PropertyTools.Wpf.TreeListBox)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TreeListBoxAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the <see cref="T:TreeListBox" /> that is associated with this <see cref="T:TreeListBoxAutomationPeer" />. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains "ListBox".</returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the <see cref="T:System.Windows.Controls.ItemsControl" /> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.
            </summary>
            <returns>The collection of child elements.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.StringUtilities">
            <summary>
            Provides utilities related to <see cref="T:System.String" />s.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.StringUtilities.FromCamelCase(System.String)">
            <summary>
            Converts a string from camel case to a string where space is inserted before each capital letter.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.StringUtilities.ToHorizontalAlignment(System.String)">
            <summary>
            Converts the specified string to horizontal alignment.
            </summary>
            <param name="a">The string to convert.</param>
            <returns>A <see cref="T:System.Windows.HorizontalAlignment" /> value.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.Tab">
            <summary>
            Represents a tab in a <see cref="T:PropertyTools.Wpf.PropertyGrid" />.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Tab.hasErrors">
            <summary>
            Indicates whether the tab contains errors.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Tab" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Groups">
            <summary>
            Gets the groups.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.HasErrors">
            <summary>
            Gets or sets a value indicating whether this tab contains properties with errors.
            </summary>
            <value><c>true</c> if this tab has errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.Contains(System.String)">
            <summary>
            Determines whether the tab contains the specified property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
            <c>true</c> if the tab contains the specified property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.UpdateHasErrors(System.ComponentModel.IDataErrorInfo)">
            <summary>
            Updates the has errors property.
            </summary>
            <param name="dei">The instance.</param>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyConverter">
            <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter" /> for a specified type.
            </summary>
            <remarks>PropertyConverters can be registered in the <see cref="T:PropertyTools.Wpf.PropertyGrid" />.Converters collection.</remarks>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyConverter" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.#ctor(System.Type,System.Windows.Data.IValueConverter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyConverter" /> class.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <param name="converter">The converter.</param>
            <param name="convertNullables">Convert nullable objects if set to <c>true</c>.</param>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyConverter.Converter">
            <summary>
            Gets or sets template for this type.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyConverter.ConvertNullables">
            <summary>
            Gets or sets a value indicating whether to convert nullable objects.
            </summary>
            <value><c>true</c> if nullable objects should be converted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyConverter.PropertyType">
            <summary>
            Gets or sets the type to edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.GetTargetType">
            <summary>
            Gets the target type of the converter.
            </summary>
            <returns>
            The target type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.IsAssignable(System.Type)">
            <summary>
            Determines whether the specified type is assignable to the EditedType.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the specified type is assignable; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CellRef">
            <summary>
            Represents a cell reference.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CellRef.column">
            <summary>
            The column.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CellRef.row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CellRef" /> struct.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
        </member>
        <member name="P:PropertyTools.Wpf.CellRef.Column">
            <summary>
            Gets the column.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CellRef.Row">
            <summary>
            Gets the row.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToColumnName(System.Int32)">
            <summary>
            Converts a column number to a column name.
            </summary>
            <param name="column">The column.</param>
            <returns>
            The to column name.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToRowName(System.Int32)">
            <summary>
            Converts a row number to a row name.
            </summary>
            <param name="row">The row.</param>
            <returns>
            The to row name.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.Equals(PropertyTools.Wpf.CellRef)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.GridLengthListConverter">
            <summary>
            The grid length list converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.GridLengthListConverter.SplitterChars">
            <summary>
            The splitter chars.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.GridLengthListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.GridLengthListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:PropertyTools.Wpf.ReflectionMath">
            <summary>
            Addition, subtraction and multiplication for all kinds of objects (by reflection to invoke the operators).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryParse(System.Type,System.String,System.IFormatProvider,System.Object@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="type">The target type.</param>
            <param name="s">The arguments.</param>
            <param name="provider">The format provider.</param>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if parsing successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryAdd(System.Object,System.Object,System.Object@)">
            <summary>
            Performs addition with the op_Addition operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The sum.</param>
            <returns>
            True if the addition succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryMultiply(System.Object,System.Object,System.Object@)">
            <summary>
            Performs multiplication with the op_Multiplication operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The product.</param>
            <returns>
            True if the multiplication succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TrySubtract(System.Object,System.Object,System.Object@)">
            <summary>
            Performs subtraction with the op_Subtraction operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <param name="result">The difference.</param>
            <returns>
            True if the subtraction succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryInvoke(System.String,System.Object,System.Object,System.Object@)">
            <summary>
            Tries to invoke invoke the specified method.
            </summary>
            <param name="methodName">The method name.</param>
            <param name="o1">The o 1.</param>
            <param name="o2">The o 2.</param>
            <param name="result">The result.</param>
            <returns>
            The try invoke.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EditableTextBlock">
            <summary>
            Provides an editable text block.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.IsEditingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.EditableTextBlock.IsEditing"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.internalIsEditingChange">
            <summary>
            Flags if it is an internal change in the IsEditing property
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.oldfocus">
            <summary>
            The old focus element.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.textBox">
            <summary>
            The text box.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.EditableTextBlock" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EditableTextBlock.IsEditing">
            <summary>
            Gets or sets a value indicating whether this instance is editing.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EditableTextBlock.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content when editing
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EditableTextBlock.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content when editing
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.BeginEdit">
            <summary>
            Begins the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.EndEdit(System.Boolean)">
            <summary>
            Ends the edit.
            </summary>
            <param name="commit">if set to <c>true</c> [commit].</param>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.IsEditingChanged">
            <summary>
            Handles changes in IsEditing.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.TextBoxKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            TextBox key down handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.TextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            TextBox lost focus handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:PropertyTools.Wpf.TypeEditor">
            <summary>
            Defines a data template for the specified type.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TypeEditor" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.#ctor(System.Type,System.Windows.DataTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TypeEditor" /> class.
            </summary>
            <param name="editedType">Type to edit.</param>
            <param name="editorTemplate">The data template.</param>
        </member>
        <member name="P:PropertyTools.Wpf.TypeEditor.EditedType">
            <summary>
            Gets or sets the type to edit.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeEditor.EditorTemplate">
            <summary>
            Gets or sets template for this type.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.IsAssignable(System.Type)">
            <summary>
            Determines whether the specified type is assignable to the EditedType.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the specified type is assignable; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.InsertionAdorner">
            <summary>
            Provides an insertion bar adorner.
            </summary>
            <remarks>See also <a href="http://bea.stollnitz.com/blog/?p=53">blog post</a>.</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.Pen">
            <summary>
            The pen.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.Triangle">
            <summary>
            The triangle.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.adornerLayer">
            <summary>
            The adorner layer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.isSeparatorHorizontal">
            <summary>
            The is separator horizontal.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.InsertionAdorner" /> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.#ctor(System.Boolean,System.Boolean,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.InsertionAdorner" /> class.
            </summary>
            <param name="isSeparatorHorizontal">if set to <c>true</c> [is separator horizontal].</param>
            <param name="isInFirstHalf">if set to <c>true</c> [is in first half].</param>
            <param name="adornedElement">The adorned element.</param>
            <param name="adornerLayer">The adorner layer.</param>
        </member>
        <member name="P:PropertyTools.Wpf.InsertionAdorner.IsInFirstHalf">
            <summary>
            Gets or sets a value indicating whether IsInFirstHalf.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.Detach">
            <summary>
            Detaches this instance from the adorner layer.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.CalculateStartAndEndPoint(System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Calculates the start and end point.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.DrawTriangle(System.Windows.Media.DrawingContext,System.Windows.Point,System.Double)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="origin">The origin.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBox">
            <summary>
            Represents a hierarchical list box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.ChildrenPathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBox.ChildrenPath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IndentationProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBox.Indentation"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IsExpandedPathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBox.IsExpandedPath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IsSelectedPathProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBox.IsSelectedPath"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.HierarchySourceProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBox.HierarchySource"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.itemToParentMap">
            <summary>
            A map from item to parent. This is used to set the Level property when the container of the item is generated.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.itemToChildrenMap">
            <summary>
            A map from item to children. This is used to show the child items.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.isExpandedMap">
            <summary>
            The is expanded map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.childrenToItemMap">
            <summary>
            A map from children collection to item.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.itemLevelMap">
            <summary>
            A map from item to level. This is used to set the Level property of the containers.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.rootNode">
            <summary>
            Dummy object that acts as the root node.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.TreeListBox" /> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.ChildrenPath">
            <summary>
            Gets or sets the binding path to the children of an item.
            </summary>
            <value>The binding path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.HierarchySource">
            <summary>
            Gets or sets the hierarchy source.
            </summary>
            <value>The hierarchy source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.Indentation">
            <summary>
            Gets or sets the indentation.
            </summary>
            <value>The indentation.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.IsExpandedPath">
            <summary>
            Gets or sets the binding path to the IsExpanded property of the items.
            </summary>
            <value>A binding path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.IsSelectedPath">
            <summary>
            Gets or sets the binding path to the IsSelected property of the items.
            </summary>
            <value>A binding path.</value>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see
            cref="M:System.Windows.FrameworkElement.ApplyTemplate" /> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ChildCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles child collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ContainerFromIndex(System.Int32)">
            <summary>
            Gets the container from the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The container.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.Collapse(System.Object)">
            <summary>
            Collapses the specified item.
            </summary>
            <param name="item">The item to collapse.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.Expand(System.Object)">
            <summary>
            Expands the specified item.
            </summary>
            <param name="item">The item to expand.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetContainerFromItem(System.Object)">
            <summary>
            Gets the container from an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The container.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>
            A <see cref="T:PropertyTools.Wpf.TreeListBoxItem" /> .
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer.
            </summary>
            <param name="item">Specified item.</param>
            <returns>
            <c>true</c> if the item is its own ItemContainer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Provides data for <see cref="T:System.Windows.Input.KeyEventArgs" /> .</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Container used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnCreateAutomationPeer">
            <summary>
            Provides an appropriate <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> implementation for this control, as part of the WPF automation infrastructure.
            </summary>
            <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.SubscribeForCollectionChanges(System.Collections.IList)">
            <summary>
            Subscribes for changes on the specified collection.
            </summary>
            <param name="collection">The collection to observe.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.UnsubscribeCollectionChanges(System.Collections.IList)">
            <summary>
            Removes the change subscription for the specified collection.
            </summary>
            <param name="collection">The collection to stop observing.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.HierarchySourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the HierarchySource.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.IndentationChanged">
            <summary>
            Handles changes in indentation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.InsertItems(System.Object,System.Collections.IList,System.Int32)">
            <summary>
            Inserts the specified items in the tree.
            </summary>
            <param name="parent">The parent item.</param>
            <param name="newItems">The new items.</param>
            <param name="newStartingIndex">The starting index of the new items.</param>
            <exception cref="T:System.InvalidOperationException">Could not get parent index in TreeListBox.</exception>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetChildren(System.Object)">
            <summary>
            Gets the children of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>A list of children.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetNextParentSibling(System.Object)">
            <summary>
            Gets the next sibling to the parent of the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The sibling item.</returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.RemoveItems(System.Collections.IList)">
            <summary>
            Removes the specified items from the tree.
            </summary>
            <param name="itemsToRemove">The items to remove.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.RemoveItem(System.Object)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.InsertItem(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts the specified item.
            </summary>
            <param name="index">The index to insert the item at.</param>
            <param name="item">The item.</param>
            <param name="parent">The parent of the item.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.AddItem(System.Object)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetChildrenCollectionByReflection(System.Object)">
            <summary>
            Gets the children collection of the specified item by reflection.
            </summary>
            <param name="item">The item.</param>
            <returns>A list of children.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBoxDragDropHelper">
            <summary>
            Drag/drop helper class for the <see cref="T:PropertyTools.Wpf.TreeListBox"/>.
            </summary>
            <remarks>Based on <a href="http://bea.stollnitz.com/blog/?p=53">blog post</a>.</remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragDropTemplateProperty">
            <summary>
            Identifies the DragDropTemplate attached dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDragSourceProperty">
            <summary>
            Identifies the IsDragSource attached dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDropTargetProperty">
            <summary>
            Identifies the IsDropTarget attached dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.format">
            <summary>
            The format.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.draggedData">
            <summary>
            The dragged data.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.dropPosition">
            <summary>
            The drop position.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.hasVerticalOrientation">
            <summary>
            The has vertical orientation.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.initialMousePosition">
            <summary>
            The initial mouse position.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.insertionAdorner">
            <summary>
            The insertion adorner.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.isInFirstHalf">
            <summary>
            The is in first half.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.sourceItemContainer">
            <summary>
            The source item container.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.sourceItemsControl">
            <summary>
            The source items control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.targetItemContainer">
            <summary>
            The target item container.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.targetItemsControl">
            <summary>
            The target items control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.topWindow">
            <summary>
            The top window.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.initialKeyStates">
            <summary>
            Keeps track of the initial drag/drop key states.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxDragDropHelper.Instance">
            <summary>
            Gets the instance singleton.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetDragDropTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the drag/drop template.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A data template.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetIsDragSource(System.Windows.DependencyObject)">
            <summary>
            Gets the IsDragSource value.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetIsDropTarget(System.Windows.DependencyObject)">
            <summary>
            Gets the IsDropTarget value.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetRelativePosition(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
            <summary>
            Gets the relative position.
            </summary>
            <param name="container">The container.</param>
            <param name="clickedPoint">The clicked point.</param>
            <param name="hasVerticalOrientation">The vertical orientation.</param>
            <returns>
            The relative position.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsMovementBigEnough(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if the specified  movement is big enough.
            </summary>
            <param name="initialMousePosition">The initial mouse position.</param>
            <param name="currentPosition">The current position.</param>
            <returns>
            True if the movement is big enough.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetDragDropTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            The set drag drop template.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetIsDragSource(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is drag source.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetIsDropTarget(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is drop target.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDragSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Determines if the drag source changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDropTargetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Determines if the drop target changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.CreateOrUpdateInsertionAdorner">
            <summary>
            Creates or updates the insertion adorner.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DecideDropTarget(System.Windows.DragEventArgs)">
            <summary>
            Decides the drop target.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSourcePreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the PreviewMouseLeftButtonDown event on the drag source.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSourcePreviewMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the PreviewMouseLeftButtonUp event on the drag source.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSourcePreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the PreviewMouseMove event on the drag source.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTargetPreviewDragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handles the PreviewDragEnter event on the drop target.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTargetPreviewDragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handles the PreviewDragLeave event on the drop target.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTargetPreviewDragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handles the PreviewDragOver event on the drop target.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTargetPreviewDrop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handles the PreviewDrop event on the drop target.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.RemoveAdorners">
            <summary>
            Removes the adorners.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.RemoveInsertionAdorner">
            <summary>
            Removes the insertion adorner.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.UpdateAdorner">
            <summary>
            Updates the adorner.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBoxItem">
            <summary>
            Represents a container for items in the <see cref="T:PropertyTools.Wpf.TreeListBox" /> .
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.HasItemsProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.HasItems"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.IsDropTargetProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.IsDropTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.IsExpandedProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.IsExpanded"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.LevelPaddingProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.LevelPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.LevelProperty">
            <summary>
            Identifies the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.Level"/> dependency property.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.ToggleExpandCommand">
            <summary>
            Gets the expand toggle command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.HasItems">
            <summary>
            Gets or sets a value indicating whether this item has child items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.IsDropTarget">
            <summary>
            Gets or sets a value indicating whether this instance should preview as a drop target.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.Level">
            <summary>
            Gets or sets the hierarchy level of the item.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.LevelPadding">
            <summary>
            Gets the padding due to hierarchy level and the parent control Indentation.
            </summary>
            <value>The level padding.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.ParentTreeListBox">
            <summary>
            Gets the parent <see cref="T:PropertyTools.Wpf.TreeListBox" />.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.LevelOrIndentationChanged">
            <summary>
            Handles changes in <see cref="P:PropertyTools.Wpf.TreeListBoxItem.Level" /> or <see cref="P:PropertyTools.Wpf.TreeListBox.Indentation" /> (in the parent control).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.IsExpandedChanged">
            <summary>
            Handles changes in the <see cref="P:PropertyTools.Wpf.TreeListBoxItem.IsExpanded" /> property.
            </summary>
        </member>
    </members>
</doc>
